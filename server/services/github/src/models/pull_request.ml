(*
 * This file has been generated by the OCamlClientCodegen generator for openapi-generator.
 *
 * Generated by: https://openapi-generator.tech
 *
 * Schema Pull_request.t : Pull requests let you tell others about changes you've pushed to a repository on GitHub. Once a pull request is sent, interested parties can review the set of changes, discuss potential modifications, and even push follow-up commits if necessary.
 *)

type t = {
    url: string;
    id: int32;
    node_id: string;
    html_url: string;
    diff_url: string;
    patch_url: string;
    issue_url: string;
    commits_url: string;
    review_comments_url: string;
    review_comment_url: string;
    comments_url: string;
    statuses_url: string;
    (* Number uniquely identifying the pull request within its repository. *)
    number: int32;
    (* State of this Pull Request. Either `open` or `closed`. *)
    state: Enums.milestone_state;
    locked: bool;
    (* The title of the pull request. *)
    title: string;
    user: Simple_user.t option;
    body: string option;
    labels: Issue_simple_labels.t list;
    milestone: Milestone.t option;
    active_lock_reason: string option [@default None];
    created_at: string;
    updated_at: string;
    closed_at: string option;
    merged_at: string option;
    merge_commit_sha: string option;
    assignee: Simple_user.t option;
    assignees: Simple_user.t list;
    requested_reviewers: Simple_user.t list;
    requested_teams: Team_simple.t list;
    head: Pull_request_head.t;
    base: Pull_request_base.t;
    _links: Pull_request_simple__links.t;
    author_association: string;
    (* Indicates whether or not the pull request is a draft. *)
    draft: bool option [@default None];
    merged: bool;
    mergeable: bool option;
    rebaseable: bool option [@default None];
    mergeable_state: string;
    merged_by: Simple_user.t option;
    comments: int32;
    review_comments: int32;
    (* Indicates whether maintainers can modify the pull request. *)
    maintainer_can_modify: bool;
    commits: int32;
    additions: int32;
    deletions: int32;
    changed_files: int32;
} [@@deriving yojson { strict = false }, show ];;

(** Pull requests let you tell others about changes you've pushed to a repository on GitHub. Once a pull request is sent, interested parties can review the set of changes, discuss potential modifications, and even push follow-up commits if necessary. *)
let create (url : string) (id : int32) (node_id : string) (html_url : string) (diff_url : string) (patch_url : string) (issue_url : string) (commits_url : string) (review_comments_url : string) (review_comment_url : string) (comments_url : string) (statuses_url : string) (number : int32) (state : Enums.milestone_state) (locked : bool) (title : string) (user : Simple_user.t option) (body : string option) (labels : Issue_simple_labels.t list) (milestone : Milestone.t option) (created_at : string) (updated_at : string) (closed_at : string option) (merged_at : string option) (merge_commit_sha : string option) (assignee : Simple_user.t option) (head : Pull_request_head.t) (base : Pull_request_base.t) (_links : Pull_request_simple__links.t) (author_association : string) (merged : bool) (mergeable : bool option) (mergeable_state : string) (merged_by : Simple_user.t option) (comments : int32) (review_comments : int32) (maintainer_can_modify : bool) (commits : int32) (additions : int32) (deletions : int32) (changed_files : int32) : t = {
    url = url;
    id = id;
    node_id = node_id;
    html_url = html_url;
    diff_url = diff_url;
    patch_url = patch_url;
    issue_url = issue_url;
    commits_url = commits_url;
    review_comments_url = review_comments_url;
    review_comment_url = review_comment_url;
    comments_url = comments_url;
    statuses_url = statuses_url;
    number = number;
    state = state;
    locked = locked;
    title = title;
    user = user;
    body = body;
    labels = labels;
    milestone = milestone;
    active_lock_reason = None;
    created_at = created_at;
    updated_at = updated_at;
    closed_at = closed_at;
    merged_at = merged_at;
    merge_commit_sha = merge_commit_sha;
    assignee = assignee;
    assignees = [];
    requested_reviewers = [];
    requested_teams = [];
    head = head;
    base = base;
    _links = _links;
    author_association = author_association;
    draft = None;
    merged = merged;
    mergeable = mergeable;
    rebaseable = None;
    mergeable_state = mergeable_state;
    merged_by = merged_by;
    comments = comments;
    review_comments = review_comments;
    maintainer_can_modify = maintainer_can_modify;
    commits = commits;
    additions = additions;
    deletions = deletions;
    changed_files = changed_files;
}

