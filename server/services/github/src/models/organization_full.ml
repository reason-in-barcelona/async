(*
 * This file has been generated by the OCamlClientCodegen generator for openapi-generator.
 *
 * Generated by: https://openapi-generator.tech
 *
 * Schema Organization_full.t : Organization Full
 *)

type t = {
    login: string;
    id: int32;
    node_id: string;
    url: string;
    repos_url: string;
    events_url: string;
    hooks_url: string;
    issues_url: string;
    members_url: string;
    public_members_url: string;
    avatar_url: string;
    description: string option;
    name: string option [@default None];
    company: string option [@default None];
    blog: string option [@default None];
    location: string option [@default None];
    email: string option [@default None];
    twitter_username: string option [@default None];
    is_verified: bool option [@default None];
    has_organization_projects: bool;
    has_repository_projects: bool;
    public_repos: int32;
    public_gists: int32;
    followers: int32;
    following: int32;
    html_url: string;
    created_at: string;
    _type: string;
    total_private_repos: int32 option [@default None];
    owned_private_repos: int32 option [@default None];
    private_gists: int32 option [@default None];
    disk_usage: int32 option [@default None];
    collaborators: int32 option [@default None];
    billing_email: string option [@default None];
    plan: Organization_full_plan.t option [@default None];
    default_repository_permission: string option [@default None];
    members_can_create_repositories: bool option [@default None];
    two_factor_requirement_enabled: bool option [@default None];
    members_allowed_repository_creation_type: string option [@default None];
    members_can_create_public_repositories: bool option [@default None];
    members_can_create_private_repositories: bool option [@default None];
    members_can_create_internal_repositories: bool option [@default None];
    members_can_create_pages: bool option [@default None];
    updated_at: string;
} [@@deriving yojson { strict = false }, show ];;

(** Organization Full *)
let create (login : string) (id : int32) (node_id : string) (url : string) (repos_url : string) (events_url : string) (hooks_url : string) (issues_url : string) (members_url : string) (public_members_url : string) (avatar_url : string) (description : string option) (has_organization_projects : bool) (has_repository_projects : bool) (public_repos : int32) (public_gists : int32) (followers : int32) (following : int32) (html_url : string) (created_at : string) (_type : string) (updated_at : string) : t = {
    login = login;
    id = id;
    node_id = node_id;
    url = url;
    repos_url = repos_url;
    events_url = events_url;
    hooks_url = hooks_url;
    issues_url = issues_url;
    members_url = members_url;
    public_members_url = public_members_url;
    avatar_url = avatar_url;
    description = description;
    name = None;
    company = None;
    blog = None;
    location = None;
    email = None;
    twitter_username = None;
    is_verified = None;
    has_organization_projects = has_organization_projects;
    has_repository_projects = has_repository_projects;
    public_repos = public_repos;
    public_gists = public_gists;
    followers = followers;
    following = following;
    html_url = html_url;
    created_at = created_at;
    _type = _type;
    total_private_repos = None;
    owned_private_repos = None;
    private_gists = None;
    disk_usage = None;
    collaborators = None;
    billing_email = None;
    plan = None;
    default_repository_permission = None;
    members_can_create_repositories = None;
    two_factor_requirement_enabled = None;
    members_allowed_repository_creation_type = None;
    members_can_create_public_repositories = None;
    members_can_create_private_repositories = None;
    members_can_create_internal_repositories = None;
    members_can_create_pages = None;
    updated_at = updated_at;
}

