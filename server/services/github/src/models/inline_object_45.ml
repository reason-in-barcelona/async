(*
 * This file has been generated by the OCamlClientCodegen generator for openapi-generator.
 *
 * Generated by: https://openapi-generator.tech
 *
 *)

type t = {
    (* The name of the repository. *)
    name: string;
    (* A short description of the repository. *)
    description: string option [@default None];
    (* A URL with more information about the repository. *)
    homepage: string option [@default None];
    (* Either `true` to create a private repository or `false` to create a public one. *)
    _private: bool option [@default None];
    (* Can be `public` or `private`. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, `visibility` can also be `internal`. For more information, see \''[Creating an internal repository](https://help.github.com/en/github/creating-cloning-and-archiving-repositories/about-repository-visibility#about-internal-repositories)\'' in the GitHub Help documentation.   The `visibility` parameter overrides the `private` parameter when you use both parameters with the `nebula-preview` preview header. *)
    visibility: Enums.inline_object_45_visibility option [@default None];
    (* Either `true` to enable issues for this repository or `false` to disable them. *)
    has_issues: bool option [@default None];
    (* Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error. *)
    has_projects: bool option [@default None];
    (* Either `true` to enable the wiki for this repository or `false` to disable it. *)
    has_wiki: bool option [@default None];
    (* Either `true` to make this repo available as a template repository or `false` to prevent it. *)
    is_template: bool option [@default None];
    (* The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization. *)
    team_id: int32 option [@default None];
    (* Pass `true` to create an initial commit with empty README. *)
    auto_init: bool option [@default None];
    (* Desired language or platform [.gitignore template](https://github.com/github/gitignore) to apply. Use the name of the template without the extension. For example, \''Haskell\''. *)
    gitignore_template: string option [@default None];
    (* Choose an [open source license template](https://choosealicense.com/) that best suits your needs, and then use the [license keyword](https://help.github.com/articles/licensing-a-repository/#searching-github-by-license-type) as the `license_template` string. For example, \''mit\'' or \''mpl-2.0\''. *)
    license_template: string option [@default None];
    (* Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging. *)
    allow_squash_merge: bool option [@default None];
    (* Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits. *)
    allow_merge_commit: bool option [@default None];
    (* Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging. *)
    allow_rebase_merge: bool option [@default None];
    (* Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion. *)
    delete_branch_on_merge: bool option [@default None];
} [@@deriving yojson { strict = false }, show ];;

let create (name : string) : t = {
    name = name;
    description = None;
    homepage = None;
    _private = None;
    visibility = None;
    has_issues = None;
    has_projects = None;
    has_wiki = None;
    is_template = None;
    team_id = None;
    auto_init = None;
    gitignore_template = None;
    license_template = None;
    allow_squash_merge = None;
    allow_merge_commit = None;
    allow_rebase_merge = None;
    delete_branch_on_merge = None;
}

