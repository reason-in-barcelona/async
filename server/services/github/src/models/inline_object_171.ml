(*
 * This file has been generated by the OCamlClientCodegen generator for openapi-generator.
 *
 * Generated by: https://openapi-generator.tech
 *
 *)

type t = {
    (* The name of the repository. *)
    name: string;
    (* A short description of the repository. *)
    description: string option [@default None];
    (* A URL with more information about the repository. *)
    homepage: string option [@default None];
    (* Whether the repository is private or public. *)
    _private: bool option [@default None];
    (* Whether issues are enabled. *)
    has_issues: bool option [@default None];
    (* Whether projects are enabled. *)
    has_projects: bool option [@default None];
    (* Whether the wiki is enabled. *)
    has_wiki: bool option [@default None];
    (* The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization. *)
    team_id: int32 option [@default None];
    (* Whether the repository is initialized with a minimal README. *)
    auto_init: bool option [@default None];
    (* The desired language or platform to apply to the .gitignore. *)
    gitignore_template: string option [@default None];
    (* The license keyword of the open source license for this repository. *)
    license_template: string option [@default None];
    (* Whether to allow squash merges for pull requests. *)
    allow_squash_merge: bool option [@default None];
    (* Whether to allow merge commits for pull requests. *)
    allow_merge_commit: bool option [@default None];
    (* Whether to allow rebase merges for pull requests. *)
    allow_rebase_merge: bool option [@default None];
    (* Whether to delete head branches when pull requests are merged *)
    delete_branch_on_merge: bool option [@default None];
    (* Whether downloads are enabled. *)
    has_downloads: bool option [@default None];
    (* Whether this repository acts as a template that can be used to generate new repositories. *)
    is_template: bool option [@default None];
} [@@deriving yojson { strict = false }, show ];;

let create (name : string) : t = {
    name = name;
    description = None;
    homepage = None;
    _private = None;
    has_issues = None;
    has_projects = None;
    has_wiki = None;
    team_id = None;
    auto_init = None;
    gitignore_template = None;
    license_template = None;
    allow_squash_merge = None;
    allow_merge_commit = None;
    allow_rebase_merge = None;
    delete_branch_on_merge = None;
    has_downloads = None;
    is_template = None;
}

