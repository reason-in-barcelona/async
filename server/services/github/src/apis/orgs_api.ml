(*
 * This file has been generated by the OCamlClientCodegen generator for openapi-generator.
 *
 * Generated by: https://openapi-generator.tech
 *
 *)

let orgs_check_membership_for_user ~org ~username =
    let open Lwt in
    let uri = Request.build_uri "/orgs/{org}/members/{username}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "org" (fun x -> x) org in
    let uri = Request.replace_path_param uri "username" (fun x -> x) username in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let orgs_check_public_membership_for_user ~org ~username =
    let open Lwt in
    let uri = Request.build_uri "/orgs/{org}/public_members/{username}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "org" (fun x -> x) org in
    let uri = Request.replace_path_param uri "username" (fun x -> x) username in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let orgs_convert_member_to_outside_collaborator ~org ~username =
    let open Lwt in
    let uri = Request.build_uri "/orgs/{org}/outside_collaborators/{username}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "org" (fun x -> x) org in
    let uri = Request.replace_path_param uri "username" (fun x -> x) username in
    Cohttp_lwt_unix.Client.call `PUT uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let orgs_create_webhook ~org ~inline_object_40_t () =
    let open Lwt in
    let uri = Request.build_uri "/orgs/{org}/hooks" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "org" (fun x -> x) org in
    let body = Request.write_as_json_body Inline_object_40.to_yojson inline_object_40_t in
    Cohttp_lwt_unix.Client.call `POST uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Org_hook.of_yojson) resp body

let orgs_delete_webhook ~org ~hook_id =
    let open Lwt in
    let uri = Request.build_uri "/orgs/{org}/hooks/{hook_id}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "org" (fun x -> x) org in
    let uri = Request.replace_path_param uri "hook_id" Int32.to_string hook_id in
    Cohttp_lwt_unix.Client.call `DELETE uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let orgs_get ~org =
    let open Lwt in
    let uri = Request.build_uri "/orgs/{org}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "org" (fun x -> x) org in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Organization_full.of_yojson) resp body

let orgs_get_membership_for_authenticated_user ~org =
    let open Lwt in
    let uri = Request.build_uri "/user/memberships/orgs/{org}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "org" (fun x -> x) org in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Org_membership.of_yojson) resp body

let orgs_get_membership_for_user ~org ~username =
    let open Lwt in
    let uri = Request.build_uri "/orgs/{org}/memberships/{username}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "org" (fun x -> x) org in
    let uri = Request.replace_path_param uri "username" (fun x -> x) username in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Org_membership.of_yojson) resp body

let orgs_get_webhook ~org ~hook_id =
    let open Lwt in
    let uri = Request.build_uri "/orgs/{org}/hooks/{hook_id}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "org" (fun x -> x) org in
    let uri = Request.replace_path_param uri "hook_id" Int32.to_string hook_id in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Org_hook.of_yojson) resp body

let orgs_list ?since ?(per_page = 30l) () =
    let open Lwt in
    let uri = Request.build_uri "/organizations" in
    let headers = Request.default_headers in
    let uri = Request.maybe_add_query_param uri "since" Int32.to_string since in
    let uri = Request.add_query_param uri "per_page" Int32.to_string per_page in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as_list_of (JsonSupport.unwrap Organization_simple.of_yojson) resp body

let orgs_list_app_installations ~org ?(per_page = 30l) ?(page = 1l) () =
    let open Lwt in
    let uri = Request.build_uri "/orgs/{org}/installations" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "org" (fun x -> x) org in
    let uri = Request.add_query_param uri "per_page" Int32.to_string per_page in
    let uri = Request.add_query_param uri "page" Int32.to_string page in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Inline_response_200_9.of_yojson) resp body

let orgs_list_for_authenticated_user ?(per_page = 30l) ?(page = 1l) () =
    let open Lwt in
    let uri = Request.build_uri "/user/orgs" in
    let headers = Request.default_headers in
    let uri = Request.add_query_param uri "per_page" Int32.to_string per_page in
    let uri = Request.add_query_param uri "page" Int32.to_string page in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as_list_of (JsonSupport.unwrap Organization_simple.of_yojson) resp body

let orgs_list_for_user ~username ?(per_page = 30l) ?(page = 1l) () =
    let open Lwt in
    let uri = Request.build_uri "/users/{username}/orgs" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "username" (fun x -> x) username in
    let uri = Request.add_query_param uri "per_page" Int32.to_string per_page in
    let uri = Request.add_query_param uri "page" Int32.to_string page in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as_list_of (JsonSupport.unwrap Organization_simple.of_yojson) resp body

let orgs_list_members ~org ?(filter = `All) ?(role = `All) ?(per_page = 30l) ?(page = 1l) () =
    let open Lwt in
    let uri = Request.build_uri "/orgs/{org}/members" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "org" (fun x -> x) org in
    let uri = Request.add_query_param uri "filter" Enums.show_filter_1 filter in
    let uri = Request.add_query_param uri "role" Enums.show_role_0 role in
    let uri = Request.add_query_param uri "per_page" Int32.to_string per_page in
    let uri = Request.add_query_param uri "page" Int32.to_string page in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as_list_of (JsonSupport.unwrap Simple_user.of_yojson) resp body

let orgs_list_memberships_for_authenticated_user ?state ?(per_page = 30l) ?(page = 1l) () =
    let open Lwt in
    let uri = Request.build_uri "/user/memberships/orgs" in
    let headers = Request.default_headers in
    let uri = Request.maybe_add_query_param uri "state" Enums.show_state_0 state in
    let uri = Request.add_query_param uri "per_page" Int32.to_string per_page in
    let uri = Request.add_query_param uri "page" Int32.to_string page in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as_list_of (JsonSupport.unwrap Org_membership.of_yojson) resp body

let orgs_list_outside_collaborators ~org ?(filter = `All) ?(per_page = 30l) ?(page = 1l) () =
    let open Lwt in
    let uri = Request.build_uri "/orgs/{org}/outside_collaborators" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "org" (fun x -> x) org in
    let uri = Request.add_query_param uri "filter" Enums.show_filter_1 filter in
    let uri = Request.add_query_param uri "per_page" Int32.to_string per_page in
    let uri = Request.add_query_param uri "page" Int32.to_string page in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as_list_of (JsonSupport.unwrap Simple_user.of_yojson) resp body

let orgs_list_public_members ~org ?(per_page = 30l) ?(page = 1l) () =
    let open Lwt in
    let uri = Request.build_uri "/orgs/{org}/public_members" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "org" (fun x -> x) org in
    let uri = Request.add_query_param uri "per_page" Int32.to_string per_page in
    let uri = Request.add_query_param uri "page" Int32.to_string page in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as_list_of (JsonSupport.unwrap Simple_user.of_yojson) resp body

let orgs_list_webhooks ~org ?(per_page = 30l) ?(page = 1l) () =
    let open Lwt in
    let uri = Request.build_uri "/orgs/{org}/hooks" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "org" (fun x -> x) org in
    let uri = Request.add_query_param uri "per_page" Int32.to_string per_page in
    let uri = Request.add_query_param uri "page" Int32.to_string page in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as_list_of (JsonSupport.unwrap Org_hook.of_yojson) resp body

let orgs_ping_webhook ~org ~hook_id =
    let open Lwt in
    let uri = Request.build_uri "/orgs/{org}/hooks/{hook_id}/pings" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "org" (fun x -> x) org in
    let uri = Request.replace_path_param uri "hook_id" Int32.to_string hook_id in
    Cohttp_lwt_unix.Client.call `POST uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let orgs_remove_member ~org ~username =
    let open Lwt in
    let uri = Request.build_uri "/orgs/{org}/members/{username}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "org" (fun x -> x) org in
    let uri = Request.replace_path_param uri "username" (fun x -> x) username in
    Cohttp_lwt_unix.Client.call `DELETE uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let orgs_remove_membership_for_user ~org ~username =
    let open Lwt in
    let uri = Request.build_uri "/orgs/{org}/memberships/{username}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "org" (fun x -> x) org in
    let uri = Request.replace_path_param uri "username" (fun x -> x) username in
    Cohttp_lwt_unix.Client.call `DELETE uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let orgs_remove_outside_collaborator ~org ~username =
    let open Lwt in
    let uri = Request.build_uri "/orgs/{org}/outside_collaborators/{username}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "org" (fun x -> x) org in
    let uri = Request.replace_path_param uri "username" (fun x -> x) username in
    Cohttp_lwt_unix.Client.call `DELETE uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let orgs_remove_public_membership_for_authenticated_user ~org ~username =
    let open Lwt in
    let uri = Request.build_uri "/orgs/{org}/public_members/{username}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "org" (fun x -> x) org in
    let uri = Request.replace_path_param uri "username" (fun x -> x) username in
    Cohttp_lwt_unix.Client.call `DELETE uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let orgs_set_membership_for_user ~org ~username ~inline_object_42_t () =
    let open Lwt in
    let uri = Request.build_uri "/orgs/{org}/memberships/{username}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "org" (fun x -> x) org in
    let uri = Request.replace_path_param uri "username" (fun x -> x) username in
    let body = Request.write_as_json_body Inline_object_42.to_yojson inline_object_42_t in
    Cohttp_lwt_unix.Client.call `PUT uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Org_membership.of_yojson) resp body

let orgs_set_public_membership_for_authenticated_user ~org ~username =
    let open Lwt in
    let uri = Request.build_uri "/orgs/{org}/public_members/{username}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "org" (fun x -> x) org in
    let uri = Request.replace_path_param uri "username" (fun x -> x) username in
    Cohttp_lwt_unix.Client.call `PUT uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let orgs_update ~org ~inline_object_33_t () =
    let open Lwt in
    let uri = Request.build_uri "/orgs/{org}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "org" (fun x -> x) org in
    let body = Request.write_as_json_body Inline_object_33.to_yojson inline_object_33_t in
    Cohttp_lwt_unix.Client.call `PATCH uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Organization_full.of_yojson) resp body

let orgs_update_membership_for_authenticated_user ~org ~inline_object_169_t () =
    let open Lwt in
    let uri = Request.build_uri "/user/memberships/orgs/{org}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "org" (fun x -> x) org in
    let body = Request.write_as_json_body Inline_object_169.to_yojson inline_object_169_t in
    Cohttp_lwt_unix.Client.call `PATCH uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Org_membership.of_yojson) resp body

let orgs_update_webhook ~org ~hook_id ~inline_object_41_t () =
    let open Lwt in
    let uri = Request.build_uri "/orgs/{org}/hooks/{hook_id}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "org" (fun x -> x) org in
    let uri = Request.replace_path_param uri "hook_id" Int32.to_string hook_id in
    let body = Request.write_as_json_body Inline_object_41.to_yojson inline_object_41_t in
    Cohttp_lwt_unix.Client.call `PATCH uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Org_hook.of_yojson) resp body

