(*
 * This file has been generated by the OCamlClientCodegen generator for openapi-generator.
 *
 * Generated by: https://openapi-generator.tech
 *
 *)

let teams_add_member_legacy ~team_id ~username =
    let open Lwt in
    let uri = Request.build_uri "/teams/{team_id}/members/{username}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "team_id" Int32.to_string team_id in
    let uri = Request.replace_path_param uri "username" (fun x -> x) username in
    Cohttp_lwt_unix.Client.call `PUT uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let teams_add_or_update_membership_for_user_in_org ~org ~team_slug ~username ~inline_object_54_t () =
    let open Lwt in
    let uri = Request.build_uri "/orgs/{org}/teams/{team_slug}/memberships/{username}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "org" (fun x -> x) org in
    let uri = Request.replace_path_param uri "team_slug" (fun x -> x) team_slug in
    let uri = Request.replace_path_param uri "username" (fun x -> x) username in
    let body = Request.write_as_json_body Inline_object_54.to_yojson inline_object_54_t in
    Cohttp_lwt_unix.Client.call `PUT uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Team_membership.of_yojson) resp body

let teams_add_or_update_membership_for_user_legacy ~team_id ~username ~inline_object_163_t () =
    let open Lwt in
    let uri = Request.build_uri "/teams/{team_id}/memberships/{username}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "team_id" Int32.to_string team_id in
    let uri = Request.replace_path_param uri "username" (fun x -> x) username in
    let body = Request.write_as_json_body Inline_object_163.to_yojson inline_object_163_t in
    Cohttp_lwt_unix.Client.call `PUT uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Team_membership.of_yojson) resp body

let teams_add_or_update_project_permissions_in_org ~org ~team_slug ~project_id ~inline_object_55_t () =
    let open Lwt in
    let uri = Request.build_uri "/orgs/{org}/teams/{team_slug}/projects/{project_id}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "org" (fun x -> x) org in
    let uri = Request.replace_path_param uri "team_slug" (fun x -> x) team_slug in
    let uri = Request.replace_path_param uri "project_id" Int32.to_string project_id in
    let body = Request.write_as_json_body Inline_object_55.to_yojson inline_object_55_t in
    Cohttp_lwt_unix.Client.call `PUT uri ~headers ~body >>= fun (resp, body) ->
    Request.handle_unit_response resp

let teams_add_or_update_project_permissions_legacy ~team_id ~project_id ~inline_object_164_t () =
    let open Lwt in
    let uri = Request.build_uri "/teams/{team_id}/projects/{project_id}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "team_id" Int32.to_string team_id in
    let uri = Request.replace_path_param uri "project_id" Int32.to_string project_id in
    let body = Request.write_as_json_body Inline_object_164.to_yojson inline_object_164_t in
    Cohttp_lwt_unix.Client.call `PUT uri ~headers ~body >>= fun (resp, body) ->
    Request.handle_unit_response resp

let teams_add_or_update_repo_permissions_in_org ~org ~team_slug ~owner ~repo ~inline_object_56_t () =
    let open Lwt in
    let uri = Request.build_uri "/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "org" (fun x -> x) org in
    let uri = Request.replace_path_param uri "team_slug" (fun x -> x) team_slug in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let body = Request.write_as_json_body Inline_object_56.to_yojson inline_object_56_t in
    Cohttp_lwt_unix.Client.call `PUT uri ~headers ~body >>= fun (resp, body) ->
    Request.handle_unit_response resp

let teams_add_or_update_repo_permissions_legacy ~team_id ~owner ~repo ~inline_object_165_t () =
    let open Lwt in
    let uri = Request.build_uri "/teams/{team_id}/repos/{owner}/{repo}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "team_id" Int32.to_string team_id in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let body = Request.write_as_json_body Inline_object_165.to_yojson inline_object_165_t in
    Cohttp_lwt_unix.Client.call `PUT uri ~headers ~body >>= fun (resp, body) ->
    Request.handle_unit_response resp

let teams_check_permissions_for_project_in_org ~org ~team_slug ~project_id =
    let open Lwt in
    let uri = Request.build_uri "/orgs/{org}/teams/{team_slug}/projects/{project_id}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "org" (fun x -> x) org in
    let uri = Request.replace_path_param uri "team_slug" (fun x -> x) team_slug in
    let uri = Request.replace_path_param uri "project_id" Int32.to_string project_id in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Team_project.of_yojson) resp body

let teams_check_permissions_for_project_legacy ~team_id ~project_id =
    let open Lwt in
    let uri = Request.build_uri "/teams/{team_id}/projects/{project_id}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "team_id" Int32.to_string team_id in
    let uri = Request.replace_path_param uri "project_id" Int32.to_string project_id in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Team_project.of_yojson) resp body

let teams_check_permissions_for_repo_in_org ~org ~team_slug ~owner ~repo =
    let open Lwt in
    let uri = Request.build_uri "/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "org" (fun x -> x) org in
    let uri = Request.replace_path_param uri "team_slug" (fun x -> x) team_slug in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Team_repository.of_yojson) resp body

let teams_check_permissions_for_repo_legacy ~team_id ~owner ~repo =
    let open Lwt in
    let uri = Request.build_uri "/teams/{team_id}/repos/{owner}/{repo}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "team_id" Int32.to_string team_id in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Team_repository.of_yojson) resp body

let teams_create ~org ~inline_object_46_t () =
    let open Lwt in
    let uri = Request.build_uri "/orgs/{org}/teams" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "org" (fun x -> x) org in
    let body = Request.write_as_json_body Inline_object_46.to_yojson inline_object_46_t in
    Cohttp_lwt_unix.Client.call `POST uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Team_full.of_yojson) resp body

let teams_create_discussion_comment_in_org ~org ~team_slug ~discussion_number ~inline_object_50_t () =
    let open Lwt in
    let uri = Request.build_uri "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "org" (fun x -> x) org in
    let uri = Request.replace_path_param uri "team_slug" (fun x -> x) team_slug in
    let uri = Request.replace_path_param uri "discussion_number" Int32.to_string discussion_number in
    let body = Request.write_as_json_body Inline_object_50.to_yojson inline_object_50_t in
    Cohttp_lwt_unix.Client.call `POST uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Team_discussion_comment.of_yojson) resp body

let teams_create_discussion_comment_legacy ~team_id ~discussion_number ~inline_object_159_t () =
    let open Lwt in
    let uri = Request.build_uri "/teams/{team_id}/discussions/{discussion_number}/comments" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "team_id" Int32.to_string team_id in
    let uri = Request.replace_path_param uri "discussion_number" Int32.to_string discussion_number in
    let body = Request.write_as_json_body Inline_object_159.to_yojson inline_object_159_t in
    Cohttp_lwt_unix.Client.call `POST uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Team_discussion_comment.of_yojson) resp body

let teams_create_discussion_in_org ~org ~team_slug ~inline_object_48_t () =
    let open Lwt in
    let uri = Request.build_uri "/orgs/{org}/teams/{team_slug}/discussions" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "org" (fun x -> x) org in
    let uri = Request.replace_path_param uri "team_slug" (fun x -> x) team_slug in
    let body = Request.write_as_json_body Inline_object_48.to_yojson inline_object_48_t in
    Cohttp_lwt_unix.Client.call `POST uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Team_discussion.of_yojson) resp body

let teams_create_discussion_legacy ~team_id ~inline_object_157_t () =
    let open Lwt in
    let uri = Request.build_uri "/teams/{team_id}/discussions" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "team_id" Int32.to_string team_id in
    let body = Request.write_as_json_body Inline_object_157.to_yojson inline_object_157_t in
    Cohttp_lwt_unix.Client.call `POST uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Team_discussion.of_yojson) resp body

let teams_delete_discussion_comment_in_org ~org ~team_slug ~discussion_number ~comment_number =
    let open Lwt in
    let uri = Request.build_uri "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "org" (fun x -> x) org in
    let uri = Request.replace_path_param uri "team_slug" (fun x -> x) team_slug in
    let uri = Request.replace_path_param uri "discussion_number" Int32.to_string discussion_number in
    let uri = Request.replace_path_param uri "comment_number" Int32.to_string comment_number in
    Cohttp_lwt_unix.Client.call `DELETE uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let teams_delete_discussion_comment_legacy ~team_id ~discussion_number ~comment_number =
    let open Lwt in
    let uri = Request.build_uri "/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "team_id" Int32.to_string team_id in
    let uri = Request.replace_path_param uri "discussion_number" Int32.to_string discussion_number in
    let uri = Request.replace_path_param uri "comment_number" Int32.to_string comment_number in
    Cohttp_lwt_unix.Client.call `DELETE uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let teams_delete_discussion_in_org ~org ~team_slug ~discussion_number =
    let open Lwt in
    let uri = Request.build_uri "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "org" (fun x -> x) org in
    let uri = Request.replace_path_param uri "team_slug" (fun x -> x) team_slug in
    let uri = Request.replace_path_param uri "discussion_number" Int32.to_string discussion_number in
    Cohttp_lwt_unix.Client.call `DELETE uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let teams_delete_discussion_legacy ~team_id ~discussion_number =
    let open Lwt in
    let uri = Request.build_uri "/teams/{team_id}/discussions/{discussion_number}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "team_id" Int32.to_string team_id in
    let uri = Request.replace_path_param uri "discussion_number" Int32.to_string discussion_number in
    Cohttp_lwt_unix.Client.call `DELETE uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let teams_delete_in_org ~org ~team_slug =
    let open Lwt in
    let uri = Request.build_uri "/orgs/{org}/teams/{team_slug}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "org" (fun x -> x) org in
    let uri = Request.replace_path_param uri "team_slug" (fun x -> x) team_slug in
    Cohttp_lwt_unix.Client.call `DELETE uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let teams_delete_legacy ~team_id =
    let open Lwt in
    let uri = Request.build_uri "/teams/{team_id}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "team_id" Int32.to_string team_id in
    Cohttp_lwt_unix.Client.call `DELETE uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let teams_get_by_name ~org ~team_slug =
    let open Lwt in
    let uri = Request.build_uri "/orgs/{org}/teams/{team_slug}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "org" (fun x -> x) org in
    let uri = Request.replace_path_param uri "team_slug" (fun x -> x) team_slug in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Team_full.of_yojson) resp body

let teams_get_discussion_comment_in_org ~org ~team_slug ~discussion_number ~comment_number =
    let open Lwt in
    let uri = Request.build_uri "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "org" (fun x -> x) org in
    let uri = Request.replace_path_param uri "team_slug" (fun x -> x) team_slug in
    let uri = Request.replace_path_param uri "discussion_number" Int32.to_string discussion_number in
    let uri = Request.replace_path_param uri "comment_number" Int32.to_string comment_number in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Team_discussion_comment.of_yojson) resp body

let teams_get_discussion_comment_legacy ~team_id ~discussion_number ~comment_number =
    let open Lwt in
    let uri = Request.build_uri "/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "team_id" Int32.to_string team_id in
    let uri = Request.replace_path_param uri "discussion_number" Int32.to_string discussion_number in
    let uri = Request.replace_path_param uri "comment_number" Int32.to_string comment_number in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Team_discussion_comment.of_yojson) resp body

let teams_get_discussion_in_org ~org ~team_slug ~discussion_number =
    let open Lwt in
    let uri = Request.build_uri "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "org" (fun x -> x) org in
    let uri = Request.replace_path_param uri "team_slug" (fun x -> x) team_slug in
    let uri = Request.replace_path_param uri "discussion_number" Int32.to_string discussion_number in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Team_discussion.of_yojson) resp body

let teams_get_discussion_legacy ~team_id ~discussion_number =
    let open Lwt in
    let uri = Request.build_uri "/teams/{team_id}/discussions/{discussion_number}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "team_id" Int32.to_string team_id in
    let uri = Request.replace_path_param uri "discussion_number" Int32.to_string discussion_number in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Team_discussion.of_yojson) resp body

let teams_get_legacy ~team_id =
    let open Lwt in
    let uri = Request.build_uri "/teams/{team_id}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "team_id" Int32.to_string team_id in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Team_full.of_yojson) resp body

let teams_get_member_legacy ~team_id ~username =
    let open Lwt in
    let uri = Request.build_uri "/teams/{team_id}/members/{username}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "team_id" Int32.to_string team_id in
    let uri = Request.replace_path_param uri "username" (fun x -> x) username in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let teams_get_membership_for_user_in_org ~org ~team_slug ~username =
    let open Lwt in
    let uri = Request.build_uri "/orgs/{org}/teams/{team_slug}/memberships/{username}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "org" (fun x -> x) org in
    let uri = Request.replace_path_param uri "team_slug" (fun x -> x) team_slug in
    let uri = Request.replace_path_param uri "username" (fun x -> x) username in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Team_membership.of_yojson) resp body

let teams_get_membership_for_user_legacy ~team_id ~username =
    let open Lwt in
    let uri = Request.build_uri "/teams/{team_id}/memberships/{username}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "team_id" Int32.to_string team_id in
    let uri = Request.replace_path_param uri "username" (fun x -> x) username in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Team_membership.of_yojson) resp body

let teams_list ~org ?(per_page = 30l) ?(page = 1l) () =
    let open Lwt in
    let uri = Request.build_uri "/orgs/{org}/teams" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "org" (fun x -> x) org in
    let uri = Request.add_query_param uri "per_page" Int32.to_string per_page in
    let uri = Request.add_query_param uri "page" Int32.to_string page in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as_list_of (JsonSupport.unwrap Team.of_yojson) resp body

let teams_list_child_in_org ~org ~team_slug ?(per_page = 30l) ?(page = 1l) () =
    let open Lwt in
    let uri = Request.build_uri "/orgs/{org}/teams/{team_slug}/teams" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "org" (fun x -> x) org in
    let uri = Request.replace_path_param uri "team_slug" (fun x -> x) team_slug in
    let uri = Request.add_query_param uri "per_page" Int32.to_string per_page in
    let uri = Request.add_query_param uri "page" Int32.to_string page in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as_list_of (JsonSupport.unwrap Team.of_yojson) resp body

let teams_list_child_legacy ~team_id ?(per_page = 30l) ?(page = 1l) () =
    let open Lwt in
    let uri = Request.build_uri "/teams/{team_id}/teams" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "team_id" Int32.to_string team_id in
    let uri = Request.add_query_param uri "per_page" Int32.to_string per_page in
    let uri = Request.add_query_param uri "page" Int32.to_string page in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as_list_of (JsonSupport.unwrap Team.of_yojson) resp body

let teams_list_discussion_comments_in_org ~org ~team_slug ~discussion_number ?(direction = `Desc) ?(per_page = 30l) ?(page = 1l) () =
    let open Lwt in
    let uri = Request.build_uri "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "org" (fun x -> x) org in
    let uri = Request.replace_path_param uri "team_slug" (fun x -> x) team_slug in
    let uri = Request.replace_path_param uri "discussion_number" Int32.to_string discussion_number in
    let uri = Request.add_query_param uri "direction" Enums.show_direction direction in
    let uri = Request.add_query_param uri "per_page" Int32.to_string per_page in
    let uri = Request.add_query_param uri "page" Int32.to_string page in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as_list_of (JsonSupport.unwrap Team_discussion_comment.of_yojson) resp body

let teams_list_discussion_comments_legacy ~team_id ~discussion_number ?(direction = `Desc) ?(per_page = 30l) ?(page = 1l) () =
    let open Lwt in
    let uri = Request.build_uri "/teams/{team_id}/discussions/{discussion_number}/comments" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "team_id" Int32.to_string team_id in
    let uri = Request.replace_path_param uri "discussion_number" Int32.to_string discussion_number in
    let uri = Request.add_query_param uri "direction" Enums.show_direction direction in
    let uri = Request.add_query_param uri "per_page" Int32.to_string per_page in
    let uri = Request.add_query_param uri "page" Int32.to_string page in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as_list_of (JsonSupport.unwrap Team_discussion_comment.of_yojson) resp body

let teams_list_discussions_in_org ~org ~team_slug ?(direction = `Desc) ?(per_page = 30l) ?(page = 1l) () =
    let open Lwt in
    let uri = Request.build_uri "/orgs/{org}/teams/{team_slug}/discussions" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "org" (fun x -> x) org in
    let uri = Request.replace_path_param uri "team_slug" (fun x -> x) team_slug in
    let uri = Request.add_query_param uri "direction" Enums.show_direction direction in
    let uri = Request.add_query_param uri "per_page" Int32.to_string per_page in
    let uri = Request.add_query_param uri "page" Int32.to_string page in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as_list_of (JsonSupport.unwrap Team_discussion.of_yojson) resp body

let teams_list_discussions_legacy ~team_id ?(direction = `Desc) ?(per_page = 30l) ?(page = 1l) () =
    let open Lwt in
    let uri = Request.build_uri "/teams/{team_id}/discussions" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "team_id" Int32.to_string team_id in
    let uri = Request.add_query_param uri "direction" Enums.show_direction direction in
    let uri = Request.add_query_param uri "per_page" Int32.to_string per_page in
    let uri = Request.add_query_param uri "page" Int32.to_string page in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as_list_of (JsonSupport.unwrap Team_discussion.of_yojson) resp body

let teams_list_for_authenticated_user ?(per_page = 30l) ?(page = 1l) () =
    let open Lwt in
    let uri = Request.build_uri "/user/teams" in
    let headers = Request.default_headers in
    let uri = Request.add_query_param uri "per_page" Int32.to_string per_page in
    let uri = Request.add_query_param uri "page" Int32.to_string page in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as_list_of (JsonSupport.unwrap Team_full.of_yojson) resp body

let teams_list_members_in_org ~org ~team_slug ?(role = `All) ?(per_page = 30l) ?(page = 1l) () =
    let open Lwt in
    let uri = Request.build_uri "/orgs/{org}/teams/{team_slug}/members" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "org" (fun x -> x) org in
    let uri = Request.replace_path_param uri "team_slug" (fun x -> x) team_slug in
    let uri = Request.add_query_param uri "role" Enums.show_role_1 role in
    let uri = Request.add_query_param uri "per_page" Int32.to_string per_page in
    let uri = Request.add_query_param uri "page" Int32.to_string page in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as_list_of (JsonSupport.unwrap Simple_user.of_yojson) resp body

let teams_list_members_legacy ~team_id ?(role = `All) ?(per_page = 30l) ?(page = 1l) () =
    let open Lwt in
    let uri = Request.build_uri "/teams/{team_id}/members" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "team_id" Int32.to_string team_id in
    let uri = Request.add_query_param uri "role" Enums.show_role_1 role in
    let uri = Request.add_query_param uri "per_page" Int32.to_string per_page in
    let uri = Request.add_query_param uri "page" Int32.to_string page in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as_list_of (JsonSupport.unwrap Simple_user.of_yojson) resp body

let teams_list_projects_in_org ~org ~team_slug ?(per_page = 30l) ?(page = 1l) () =
    let open Lwt in
    let uri = Request.build_uri "/orgs/{org}/teams/{team_slug}/projects" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "org" (fun x -> x) org in
    let uri = Request.replace_path_param uri "team_slug" (fun x -> x) team_slug in
    let uri = Request.add_query_param uri "per_page" Int32.to_string per_page in
    let uri = Request.add_query_param uri "page" Int32.to_string page in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as_list_of (JsonSupport.unwrap Team_project.of_yojson) resp body

let teams_list_projects_legacy ~team_id ?(per_page = 30l) ?(page = 1l) () =
    let open Lwt in
    let uri = Request.build_uri "/teams/{team_id}/projects" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "team_id" Int32.to_string team_id in
    let uri = Request.add_query_param uri "per_page" Int32.to_string per_page in
    let uri = Request.add_query_param uri "page" Int32.to_string page in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as_list_of (JsonSupport.unwrap Team_project.of_yojson) resp body

let teams_list_repos_in_org ~org ~team_slug ?(per_page = 30l) ?(page = 1l) () =
    let open Lwt in
    let uri = Request.build_uri "/orgs/{org}/teams/{team_slug}/repos" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "org" (fun x -> x) org in
    let uri = Request.replace_path_param uri "team_slug" (fun x -> x) team_slug in
    let uri = Request.add_query_param uri "per_page" Int32.to_string per_page in
    let uri = Request.add_query_param uri "page" Int32.to_string page in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as_list_of (JsonSupport.unwrap Minimal_repository.of_yojson) resp body

let teams_list_repos_legacy ~team_id ?(per_page = 30l) ?(page = 1l) () =
    let open Lwt in
    let uri = Request.build_uri "/teams/{team_id}/repos" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "team_id" Int32.to_string team_id in
    let uri = Request.add_query_param uri "per_page" Int32.to_string per_page in
    let uri = Request.add_query_param uri "page" Int32.to_string page in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as_list_of (JsonSupport.unwrap Minimal_repository.of_yojson) resp body

let teams_remove_member_legacy ~team_id ~username =
    let open Lwt in
    let uri = Request.build_uri "/teams/{team_id}/members/{username}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "team_id" Int32.to_string team_id in
    let uri = Request.replace_path_param uri "username" (fun x -> x) username in
    Cohttp_lwt_unix.Client.call `DELETE uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let teams_remove_membership_for_user_in_org ~org ~team_slug ~username =
    let open Lwt in
    let uri = Request.build_uri "/orgs/{org}/teams/{team_slug}/memberships/{username}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "org" (fun x -> x) org in
    let uri = Request.replace_path_param uri "team_slug" (fun x -> x) team_slug in
    let uri = Request.replace_path_param uri "username" (fun x -> x) username in
    Cohttp_lwt_unix.Client.call `DELETE uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let teams_remove_membership_for_user_legacy ~team_id ~username =
    let open Lwt in
    let uri = Request.build_uri "/teams/{team_id}/memberships/{username}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "team_id" Int32.to_string team_id in
    let uri = Request.replace_path_param uri "username" (fun x -> x) username in
    Cohttp_lwt_unix.Client.call `DELETE uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let teams_remove_project_in_org ~org ~team_slug ~project_id =
    let open Lwt in
    let uri = Request.build_uri "/orgs/{org}/teams/{team_slug}/projects/{project_id}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "org" (fun x -> x) org in
    let uri = Request.replace_path_param uri "team_slug" (fun x -> x) team_slug in
    let uri = Request.replace_path_param uri "project_id" Int32.to_string project_id in
    Cohttp_lwt_unix.Client.call `DELETE uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let teams_remove_project_legacy ~team_id ~project_id =
    let open Lwt in
    let uri = Request.build_uri "/teams/{team_id}/projects/{project_id}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "team_id" Int32.to_string team_id in
    let uri = Request.replace_path_param uri "project_id" Int32.to_string project_id in
    Cohttp_lwt_unix.Client.call `DELETE uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let teams_remove_repo_in_org ~org ~team_slug ~owner ~repo =
    let open Lwt in
    let uri = Request.build_uri "/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "org" (fun x -> x) org in
    let uri = Request.replace_path_param uri "team_slug" (fun x -> x) team_slug in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    Cohttp_lwt_unix.Client.call `DELETE uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let teams_remove_repo_legacy ~team_id ~owner ~repo =
    let open Lwt in
    let uri = Request.build_uri "/teams/{team_id}/repos/{owner}/{repo}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "team_id" Int32.to_string team_id in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    Cohttp_lwt_unix.Client.call `DELETE uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let teams_update_discussion_comment_in_org ~org ~team_slug ~discussion_number ~comment_number ~inline_object_51_t () =
    let open Lwt in
    let uri = Request.build_uri "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "org" (fun x -> x) org in
    let uri = Request.replace_path_param uri "team_slug" (fun x -> x) team_slug in
    let uri = Request.replace_path_param uri "discussion_number" Int32.to_string discussion_number in
    let uri = Request.replace_path_param uri "comment_number" Int32.to_string comment_number in
    let body = Request.write_as_json_body Inline_object_51.to_yojson inline_object_51_t in
    Cohttp_lwt_unix.Client.call `PATCH uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Team_discussion_comment.of_yojson) resp body

let teams_update_discussion_comment_legacy ~team_id ~discussion_number ~comment_number ~inline_object_160_t () =
    let open Lwt in
    let uri = Request.build_uri "/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "team_id" Int32.to_string team_id in
    let uri = Request.replace_path_param uri "discussion_number" Int32.to_string discussion_number in
    let uri = Request.replace_path_param uri "comment_number" Int32.to_string comment_number in
    let body = Request.write_as_json_body Inline_object_160.to_yojson inline_object_160_t in
    Cohttp_lwt_unix.Client.call `PATCH uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Team_discussion_comment.of_yojson) resp body

let teams_update_discussion_in_org ~org ~team_slug ~discussion_number ~inline_object_49_t () =
    let open Lwt in
    let uri = Request.build_uri "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "org" (fun x -> x) org in
    let uri = Request.replace_path_param uri "team_slug" (fun x -> x) team_slug in
    let uri = Request.replace_path_param uri "discussion_number" Int32.to_string discussion_number in
    let body = Request.write_as_json_body Inline_object_49.to_yojson inline_object_49_t in
    Cohttp_lwt_unix.Client.call `PATCH uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Team_discussion.of_yojson) resp body

let teams_update_discussion_legacy ~team_id ~discussion_number ~inline_object_158_t () =
    let open Lwt in
    let uri = Request.build_uri "/teams/{team_id}/discussions/{discussion_number}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "team_id" Int32.to_string team_id in
    let uri = Request.replace_path_param uri "discussion_number" Int32.to_string discussion_number in
    let body = Request.write_as_json_body Inline_object_158.to_yojson inline_object_158_t in
    Cohttp_lwt_unix.Client.call `PATCH uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Team_discussion.of_yojson) resp body

let teams_update_in_org ~org ~team_slug ~inline_object_47_t () =
    let open Lwt in
    let uri = Request.build_uri "/orgs/{org}/teams/{team_slug}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "org" (fun x -> x) org in
    let uri = Request.replace_path_param uri "team_slug" (fun x -> x) team_slug in
    let body = Request.write_as_json_body Inline_object_47.to_yojson inline_object_47_t in
    Cohttp_lwt_unix.Client.call `PATCH uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Team_full.of_yojson) resp body

let teams_update_legacy ~team_id ~inline_object_156_t () =
    let open Lwt in
    let uri = Request.build_uri "/teams/{team_id}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "team_id" Int32.to_string team_id in
    let body = Request.write_as_json_body Inline_object_156.to_yojson inline_object_156_t in
    Cohttp_lwt_unix.Client.call `PATCH uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Team_full.of_yojson) resp body

