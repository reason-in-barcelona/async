(*
 * This file has been generated by the OCamlClientCodegen generator for openapi-generator.
 *
 * Generated by: https://openapi-generator.tech
 *
 *)

(* let users_add_email_for_authenticated ~unknown_base_type () =
    let open Lwt in
    let uri = Request.build_uri "/user/emails" in
    let headers = Request.default_headers in
    let body = Request.write_as_json_body UNKNOWN_BASE_TYPE.to_yojson unknown_base_type in
    Cohttp_lwt_unix.Client.call `POST uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as_list_of (JsonSupport.unwrap Email.of_yojson) resp body *)

let users_check_following_for_user ~username ~target_user =
    let open Lwt in
    let uri = Request.build_uri "/users/{username}/following/{target_user}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "username" (fun x -> x) username in
    let uri = Request.replace_path_param uri "target_user" (fun x -> x) target_user in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let users_check_person_is_followed_by_authenticated ~username =
    let open Lwt in
    let uri = Request.build_uri "/user/following/{username}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "username" (fun x -> x) username in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let users_create_gpg_key_for_authenticated ~inline_object_167_t () =
    let open Lwt in
    let uri = Request.build_uri "/user/gpg_keys" in
    let headers = Request.default_headers in
    let body = Request.write_as_json_body Inline_object_167.to_yojson inline_object_167_t in
    Cohttp_lwt_unix.Client.call `POST uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Gpg_key.of_yojson) resp body

let users_create_public_ssh_key_for_authenticated ~inline_object_168_t () =
    let open Lwt in
    let uri = Request.build_uri "/user/keys" in
    let headers = Request.default_headers in
    let body = Request.write_as_json_body Inline_object_168.to_yojson inline_object_168_t in
    Cohttp_lwt_unix.Client.call `POST uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Key.of_yojson) resp body

(* let users_delete_email_for_authenticated ~unknown_base_type () =
    let open Lwt in
    let uri = Request.build_uri "/user/emails" in
    let headers = Request.default_headers in
    let body = Request.write_as_json_body UNKNOWN_BASE_TYPE.to_yojson unknown_base_type in
    Cohttp_lwt_unix.Client.call `DELETE uri ~headers ~body >>= fun (resp, body) ->
    Request.handle_unit_response resp *)

let users_delete_gpg_key_for_authenticated ~gpg_key_id =
    let open Lwt in
    let uri = Request.build_uri "/user/gpg_keys/{gpg_key_id}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "gpg_key_id" Int32.to_string gpg_key_id in
    Cohttp_lwt_unix.Client.call `DELETE uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let users_delete_public_ssh_key_for_authenticated ~key_id =
    let open Lwt in
    let uri = Request.build_uri "/user/keys/{key_id}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "key_id" Int32.to_string key_id in
    Cohttp_lwt_unix.Client.call `DELETE uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let users_follow ~username =
    let open Lwt in
    let uri = Request.build_uri "/user/following/{username}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "username" (fun x -> x) username in
    Cohttp_lwt_unix.Client.call `PUT uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let users_get_authenticated () =
    let open Lwt in
    let uri = Request.build_uri "/user" in
    let headers = Request.default_headers in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap One_ofprivate_userpublic_user.of_yojson) resp body

let users_get_by_username ~username =
    let open Lwt in
    let uri = Request.build_uri "/users/{username}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "username" (fun x -> x) username in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap One_ofprivate_userpublic_user.of_yojson) resp body

let users_get_context_for_user ~username ?subject_type ?subject_id () =
    let open Lwt in
    let uri = Request.build_uri "/users/{username}/hovercard" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "username" (fun x -> x) username in
    let uri = Request.maybe_add_query_param uri "subject_type" Enums.show_subject_type subject_type in
    let uri = Request.maybe_add_query_param uri "subject_id" (fun x -> x) subject_id in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Hovercard.of_yojson) resp body

let users_get_gpg_key_for_authenticated ~gpg_key_id =
    let open Lwt in
    let uri = Request.build_uri "/user/gpg_keys/{gpg_key_id}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "gpg_key_id" Int32.to_string gpg_key_id in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Gpg_key.of_yojson) resp body

let users_get_public_ssh_key_for_authenticated ~key_id =
    let open Lwt in
    let uri = Request.build_uri "/user/keys/{key_id}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "key_id" Int32.to_string key_id in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Key.of_yojson) resp body

let users_list ?since ?(per_page = 30l) () =
    let open Lwt in
    let uri = Request.build_uri "/users" in
    let headers = Request.default_headers in
    let uri = Request.maybe_add_query_param uri "since" Int32.to_string since in
    let uri = Request.add_query_param uri "per_page" Int32.to_string per_page in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as_list_of (JsonSupport.unwrap Simple_user.of_yojson) resp body

let users_list_emails_for_authenticated ?(per_page = 30l) ?(page = 1l) () =
    let open Lwt in
    let uri = Request.build_uri "/user/emails" in
    let headers = Request.default_headers in
    let uri = Request.add_query_param uri "per_page" Int32.to_string per_page in
    let uri = Request.add_query_param uri "page" Int32.to_string page in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as_list_of (JsonSupport.unwrap Email.of_yojson) resp body

let users_list_followed_by_authenticated ?(per_page = 30l) ?(page = 1l) () =
    let open Lwt in
    let uri = Request.build_uri "/user/following" in
    let headers = Request.default_headers in
    let uri = Request.add_query_param uri "per_page" Int32.to_string per_page in
    let uri = Request.add_query_param uri "page" Int32.to_string page in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as_list_of (JsonSupport.unwrap Simple_user.of_yojson) resp body

let users_list_followers_for_authenticated_user ?(per_page = 30l) ?(page = 1l) () =
    let open Lwt in
    let uri = Request.build_uri "/user/followers" in
    let headers = Request.default_headers in
    let uri = Request.add_query_param uri "per_page" Int32.to_string per_page in
    let uri = Request.add_query_param uri "page" Int32.to_string page in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as_list_of (JsonSupport.unwrap Simple_user.of_yojson) resp body

let users_list_followers_for_user ~username ?(per_page = 30l) ?(page = 1l) () =
    let open Lwt in
    let uri = Request.build_uri "/users/{username}/followers" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "username" (fun x -> x) username in
    let uri = Request.add_query_param uri "per_page" Int32.to_string per_page in
    let uri = Request.add_query_param uri "page" Int32.to_string page in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as_list_of (JsonSupport.unwrap Simple_user.of_yojson) resp body

let users_list_following_for_user ~username ?(per_page = 30l) ?(page = 1l) () =
    let open Lwt in
    let uri = Request.build_uri "/users/{username}/following" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "username" (fun x -> x) username in
    let uri = Request.add_query_param uri "per_page" Int32.to_string per_page in
    let uri = Request.add_query_param uri "page" Int32.to_string page in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as_list_of (JsonSupport.unwrap Simple_user.of_yojson) resp body

let users_list_gpg_keys_for_authenticated ?(per_page = 30l) ?(page = 1l) () =
    let open Lwt in
    let uri = Request.build_uri "/user/gpg_keys" in
    let headers = Request.default_headers in
    let uri = Request.add_query_param uri "per_page" Int32.to_string per_page in
    let uri = Request.add_query_param uri "page" Int32.to_string page in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as_list_of (JsonSupport.unwrap Gpg_key.of_yojson) resp body

let users_list_gpg_keys_for_user ~username ?(per_page = 30l) ?(page = 1l) () =
    let open Lwt in
    let uri = Request.build_uri "/users/{username}/gpg_keys" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "username" (fun x -> x) username in
    let uri = Request.add_query_param uri "per_page" Int32.to_string per_page in
    let uri = Request.add_query_param uri "page" Int32.to_string page in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as_list_of (JsonSupport.unwrap Gpg_key.of_yojson) resp body

let users_list_public_emails_for_authenticated ?(per_page = 30l) ?(page = 1l) () =
    let open Lwt in
    let uri = Request.build_uri "/user/public_emails" in
    let headers = Request.default_headers in
    let uri = Request.add_query_param uri "per_page" Int32.to_string per_page in
    let uri = Request.add_query_param uri "page" Int32.to_string page in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as_list_of (JsonSupport.unwrap Email.of_yojson) resp body

let users_list_public_keys_for_user ~username ?(per_page = 30l) ?(page = 1l) () =
    let open Lwt in
    let uri = Request.build_uri "/users/{username}/keys" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "username" (fun x -> x) username in
    let uri = Request.add_query_param uri "per_page" Int32.to_string per_page in
    let uri = Request.add_query_param uri "page" Int32.to_string page in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as_list_of (JsonSupport.unwrap Key_simple.of_yojson) resp body

let users_list_public_ssh_keys_for_authenticated ?(per_page = 30l) ?(page = 1l) () =
    let open Lwt in
    let uri = Request.build_uri "/user/keys" in
    let headers = Request.default_headers in
    let uri = Request.add_query_param uri "per_page" Int32.to_string per_page in
    let uri = Request.add_query_param uri "page" Int32.to_string page in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as_list_of (JsonSupport.unwrap Key.of_yojson) resp body

let users_unfollow ~username =
    let open Lwt in
    let uri = Request.build_uri "/user/following/{username}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "username" (fun x -> x) username in
    Cohttp_lwt_unix.Client.call `DELETE uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let users_update_authenticated ~inline_object_166_t () =
    let open Lwt in
    let uri = Request.build_uri "/user" in
    let headers = Request.default_headers in
    let body = Request.write_as_json_body Inline_object_166.to_yojson inline_object_166_t in
    Cohttp_lwt_unix.Client.call `PATCH uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Private_user.of_yojson) resp body

