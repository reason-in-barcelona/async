(*
 * This file has been generated by the OCamlClientCodegen generator for openapi-generator.
 *
 * Generated by: https://openapi-generator.tech
 *
 *)

let gists_check_is_starred ~gist_id =
    let open Lwt in
    let uri = Request.build_uri "/gists/{gist_id}/star" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "gist_id" (fun x -> x) gist_id in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let gists_create ~inline_object_27_t () =
    let open Lwt in
    let uri = Request.build_uri "/gists" in
    let headers = Request.default_headers in
    let body = Request.write_as_json_body Inline_object_27.to_yojson inline_object_27_t in
    Cohttp_lwt_unix.Client.call `POST uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Gist_full.of_yojson) resp body

let gists_create_comment ~gist_id ~inline_object_28_t () =
    let open Lwt in
    let uri = Request.build_uri "/gists/{gist_id}/comments" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "gist_id" (fun x -> x) gist_id in
    let body = Request.write_as_json_body Inline_object_28.to_yojson inline_object_28_t in
    Cohttp_lwt_unix.Client.call `POST uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Gist_comment.of_yojson) resp body

let gists_delete ~gist_id =
    let open Lwt in
    let uri = Request.build_uri "/gists/{gist_id}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "gist_id" (fun x -> x) gist_id in
    Cohttp_lwt_unix.Client.call `DELETE uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let gists_delete_comment ~gist_id ~comment_id =
    let open Lwt in
    let uri = Request.build_uri "/gists/{gist_id}/comments/{comment_id}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "gist_id" (fun x -> x) gist_id in
    let uri = Request.replace_path_param uri "comment_id" Int32.to_string comment_id in
    Cohttp_lwt_unix.Client.call `DELETE uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let gists_fork ~gist_id =
    let open Lwt in
    let uri = Request.build_uri "/gists/{gist_id}/forks" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "gist_id" (fun x -> x) gist_id in
    Cohttp_lwt_unix.Client.call `POST uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Base_gist.of_yojson) resp body

let gists_get ~gist_id =
    let open Lwt in
    let uri = Request.build_uri "/gists/{gist_id}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "gist_id" (fun x -> x) gist_id in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Gist_full.of_yojson) resp body

let gists_get_comment ~gist_id ~comment_id =
    let open Lwt in
    let uri = Request.build_uri "/gists/{gist_id}/comments/{comment_id}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "gist_id" (fun x -> x) gist_id in
    let uri = Request.replace_path_param uri "comment_id" Int32.to_string comment_id in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Gist_comment.of_yojson) resp body

let gists_get_revision ~gist_id ~sha =
    let open Lwt in
    let uri = Request.build_uri "/gists/{gist_id}/{sha}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "gist_id" (fun x -> x) gist_id in
    let uri = Request.replace_path_param uri "sha" (fun x -> x) sha in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Gist_full.of_yojson) resp body

let gists_list ?since ?(per_page = 30l) ?(page = 1l) () =
    let open Lwt in
    let uri = Request.build_uri "/gists" in
    let headers = Request.default_headers in
    let uri = Request.maybe_add_query_param uri "since" (fun x -> x) since in
    let uri = Request.add_query_param uri "per_page" Int32.to_string per_page in
    let uri = Request.add_query_param uri "page" Int32.to_string page in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as_list_of (JsonSupport.unwrap Base_gist.of_yojson) resp body

let gists_list_comments ~gist_id ?(per_page = 30l) ?(page = 1l) () =
    let open Lwt in
    let uri = Request.build_uri "/gists/{gist_id}/comments" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "gist_id" (fun x -> x) gist_id in
    let uri = Request.add_query_param uri "per_page" Int32.to_string per_page in
    let uri = Request.add_query_param uri "page" Int32.to_string page in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as_list_of (JsonSupport.unwrap Gist_comment.of_yojson) resp body

let gists_list_commits ~gist_id ?(per_page = 30l) ?(page = 1l) () =
    let open Lwt in
    let uri = Request.build_uri "/gists/{gist_id}/commits" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "gist_id" (fun x -> x) gist_id in
    let uri = Request.add_query_param uri "per_page" Int32.to_string per_page in
    let uri = Request.add_query_param uri "page" Int32.to_string page in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as_list_of (JsonSupport.unwrap Gist_commit.of_yojson) resp body

let gists_list_for_user ~username ?since ?(per_page = 30l) ?(page = 1l) () =
    let open Lwt in
    let uri = Request.build_uri "/users/{username}/gists" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "username" (fun x -> x) username in
    let uri = Request.maybe_add_query_param uri "since" (fun x -> x) since in
    let uri = Request.add_query_param uri "per_page" Int32.to_string per_page in
    let uri = Request.add_query_param uri "page" Int32.to_string page in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as_list_of (JsonSupport.unwrap Base_gist.of_yojson) resp body

let gists_list_forks ~gist_id ?(per_page = 30l) ?(page = 1l) () =
    let open Lwt in
    let uri = Request.build_uri "/gists/{gist_id}/forks" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "gist_id" (fun x -> x) gist_id in
    let uri = Request.add_query_param uri "per_page" Int32.to_string per_page in
    let uri = Request.add_query_param uri "page" Int32.to_string page in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as_list_of (JsonSupport.unwrap Gist_full.of_yojson) resp body

let gists_list_public ?since ?(per_page = 30l) ?(page = 1l) () =
    let open Lwt in
    let uri = Request.build_uri "/gists/public" in
    let headers = Request.default_headers in
    let uri = Request.maybe_add_query_param uri "since" (fun x -> x) since in
    let uri = Request.add_query_param uri "per_page" Int32.to_string per_page in
    let uri = Request.add_query_param uri "page" Int32.to_string page in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as_list_of (JsonSupport.unwrap Base_gist.of_yojson) resp body

let gists_list_starred ?since ?(per_page = 30l) ?(page = 1l) () =
    let open Lwt in
    let uri = Request.build_uri "/gists/starred" in
    let headers = Request.default_headers in
    let uri = Request.maybe_add_query_param uri "since" (fun x -> x) since in
    let uri = Request.add_query_param uri "per_page" Int32.to_string per_page in
    let uri = Request.add_query_param uri "page" Int32.to_string page in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as_list_of (JsonSupport.unwrap Base_gist.of_yojson) resp body

let gists_star ~gist_id =
    let open Lwt in
    let uri = Request.build_uri "/gists/{gist_id}/star" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "gist_id" (fun x -> x) gist_id in
    Cohttp_lwt_unix.Client.call `PUT uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let gists_unstar ~gist_id =
    let open Lwt in
    let uri = Request.build_uri "/gists/{gist_id}/star" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "gist_id" (fun x -> x) gist_id in
    Cohttp_lwt_unix.Client.call `DELETE uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

(* let gists_update ~gist_id ~unknown_base_type () =
    let open Lwt in
    let uri = Request.build_uri "/gists/{gist_id}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "gist_id" (fun x -> x) gist_id in
    let body = Request.write_as_json_body UNKNOWN_BASE_TYPE.to_yojson unknown_base_type in
    Cohttp_lwt_unix.Client.call `PATCH uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Gist_full.of_yojson) resp body *)

let gists_update_comment ~gist_id ~comment_id ~inline_object_29_t () =
    let open Lwt in
    let uri = Request.build_uri "/gists/{gist_id}/comments/{comment_id}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "gist_id" (fun x -> x) gist_id in
    let uri = Request.replace_path_param uri "comment_id" Int32.to_string comment_id in
    let body = Request.write_as_json_body Inline_object_29.to_yojson inline_object_29_t in
    Cohttp_lwt_unix.Client.call `PATCH uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Gist_comment.of_yojson) resp body

