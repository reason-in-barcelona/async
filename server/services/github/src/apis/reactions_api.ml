(*
 * This file has been generated by the OCamlClientCodegen generator for openapi-generator.
 *
 * Generated by: https://openapi-generator.tech
 *
 *)

let reactions_create_for_commit_comment ~owner ~repo ~comment_id ~inline_object_90_t () =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/comments/{comment_id}/reactions" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "comment_id" Int32.to_string comment_id in
    let body = Request.write_as_json_body Inline_object_90.to_yojson inline_object_90_t in
    Cohttp_lwt_unix.Client.call `POST uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Reaction.of_yojson) resp body

let reactions_create_for_issue ~owner ~repo ~issue_number ~inline_object_116_t () =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/issues/{issue_number}/reactions" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "issue_number" Int32.to_string issue_number in
    let body = Request.write_as_json_body Inline_object_116.to_yojson inline_object_116_t in
    Cohttp_lwt_unix.Client.call `POST uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Reaction.of_yojson) resp body

let reactions_create_for_issue_comment ~owner ~repo ~comment_id ~inline_object_108_t () =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "comment_id" Int32.to_string comment_id in
    let body = Request.write_as_json_body Inline_object_108.to_yojson inline_object_108_t in
    Cohttp_lwt_unix.Client.call `POST uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Reaction.of_yojson) resp body

let reactions_create_for_pull_request_review_comment ~owner ~repo ~comment_id ~inline_object_130_t () =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "comment_id" Int32.to_string comment_id in
    let body = Request.write_as_json_body Inline_object_130.to_yojson inline_object_130_t in
    Cohttp_lwt_unix.Client.call `POST uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Reaction.of_yojson) resp body

let reactions_create_for_team_discussion_comment_in_org ~org ~team_slug ~discussion_number ~comment_number ~inline_object_52_t () =
    let open Lwt in
    let uri = Request.build_uri "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "org" (fun x -> x) org in
    let uri = Request.replace_path_param uri "team_slug" (fun x -> x) team_slug in
    let uri = Request.replace_path_param uri "discussion_number" Int32.to_string discussion_number in
    let uri = Request.replace_path_param uri "comment_number" Int32.to_string comment_number in
    let body = Request.write_as_json_body Inline_object_52.to_yojson inline_object_52_t in
    Cohttp_lwt_unix.Client.call `POST uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Reaction.of_yojson) resp body

let reactions_create_for_team_discussion_comment_legacy ~team_id ~discussion_number ~comment_number ~inline_object_161_t () =
    let open Lwt in
    let uri = Request.build_uri "/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "team_id" Int32.to_string team_id in
    let uri = Request.replace_path_param uri "discussion_number" Int32.to_string discussion_number in
    let uri = Request.replace_path_param uri "comment_number" Int32.to_string comment_number in
    let body = Request.write_as_json_body Inline_object_161.to_yojson inline_object_161_t in
    Cohttp_lwt_unix.Client.call `POST uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Reaction.of_yojson) resp body

let reactions_create_for_team_discussion_in_org ~org ~team_slug ~discussion_number ~inline_object_53_t () =
    let open Lwt in
    let uri = Request.build_uri "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "org" (fun x -> x) org in
    let uri = Request.replace_path_param uri "team_slug" (fun x -> x) team_slug in
    let uri = Request.replace_path_param uri "discussion_number" Int32.to_string discussion_number in
    let body = Request.write_as_json_body Inline_object_53.to_yojson inline_object_53_t in
    Cohttp_lwt_unix.Client.call `POST uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Reaction.of_yojson) resp body

let reactions_create_for_team_discussion_legacy ~team_id ~discussion_number ~inline_object_162_t () =
    let open Lwt in
    let uri = Request.build_uri "/teams/{team_id}/discussions/{discussion_number}/reactions" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "team_id" Int32.to_string team_id in
    let uri = Request.replace_path_param uri "discussion_number" Int32.to_string discussion_number in
    let body = Request.write_as_json_body Inline_object_162.to_yojson inline_object_162_t in
    Cohttp_lwt_unix.Client.call `POST uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Reaction.of_yojson) resp body

let reactions_delete_for_commit_comment ~owner ~repo ~comment_id ~reaction_id =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "comment_id" Int32.to_string comment_id in
    let uri = Request.replace_path_param uri "reaction_id" Int32.to_string reaction_id in
    Cohttp_lwt_unix.Client.call `DELETE uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let reactions_delete_for_issue ~owner ~repo ~issue_number ~reaction_id =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "issue_number" Int32.to_string issue_number in
    let uri = Request.replace_path_param uri "reaction_id" Int32.to_string reaction_id in
    Cohttp_lwt_unix.Client.call `DELETE uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let reactions_delete_for_issue_comment ~owner ~repo ~comment_id ~reaction_id =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "comment_id" Int32.to_string comment_id in
    let uri = Request.replace_path_param uri "reaction_id" Int32.to_string reaction_id in
    Cohttp_lwt_unix.Client.call `DELETE uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let reactions_delete_for_pull_request_comment ~owner ~repo ~comment_id ~reaction_id =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "comment_id" Int32.to_string comment_id in
    let uri = Request.replace_path_param uri "reaction_id" Int32.to_string reaction_id in
    Cohttp_lwt_unix.Client.call `DELETE uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let reactions_delete_for_team_discussion ~org ~team_slug ~discussion_number ~reaction_id =
    let open Lwt in
    let uri = Request.build_uri "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "org" (fun x -> x) org in
    let uri = Request.replace_path_param uri "team_slug" (fun x -> x) team_slug in
    let uri = Request.replace_path_param uri "discussion_number" Int32.to_string discussion_number in
    let uri = Request.replace_path_param uri "reaction_id" Int32.to_string reaction_id in
    Cohttp_lwt_unix.Client.call `DELETE uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let reactions_delete_for_team_discussion_comment ~org ~team_slug ~discussion_number ~comment_number ~reaction_id =
    let open Lwt in
    let uri = Request.build_uri "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "org" (fun x -> x) org in
    let uri = Request.replace_path_param uri "team_slug" (fun x -> x) team_slug in
    let uri = Request.replace_path_param uri "discussion_number" Int32.to_string discussion_number in
    let uri = Request.replace_path_param uri "comment_number" Int32.to_string comment_number in
    let uri = Request.replace_path_param uri "reaction_id" Int32.to_string reaction_id in
    Cohttp_lwt_unix.Client.call `DELETE uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let reactions_delete_legacy ~reaction_id =
    let open Lwt in
    let uri = Request.build_uri "/reactions/{reaction_id}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "reaction_id" Int32.to_string reaction_id in
    Cohttp_lwt_unix.Client.call `DELETE uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let reactions_list_for_commit_comment ~owner ~repo ~comment_id ?content ?(per_page = 30l) ?(page = 1l) () =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/comments/{comment_id}/reactions" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "comment_id" Int32.to_string comment_id in
    let uri = Request.maybe_add_query_param uri "content" Enums.show_content content in
    let uri = Request.add_query_param uri "per_page" Int32.to_string per_page in
    let uri = Request.add_query_param uri "page" Int32.to_string page in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as_list_of (JsonSupport.unwrap Reaction.of_yojson) resp body

let reactions_list_for_issue ~owner ~repo ~issue_number ?content ?(per_page = 30l) ?(page = 1l) () =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/issues/{issue_number}/reactions" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "issue_number" Int32.to_string issue_number in
    let uri = Request.maybe_add_query_param uri "content" Enums.show_content content in
    let uri = Request.add_query_param uri "per_page" Int32.to_string per_page in
    let uri = Request.add_query_param uri "page" Int32.to_string page in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as_list_of (JsonSupport.unwrap Reaction.of_yojson) resp body

let reactions_list_for_issue_comment ~owner ~repo ~comment_id ?content ?(per_page = 30l) ?(page = 1l) () =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "comment_id" Int32.to_string comment_id in
    let uri = Request.maybe_add_query_param uri "content" Enums.show_content content in
    let uri = Request.add_query_param uri "per_page" Int32.to_string per_page in
    let uri = Request.add_query_param uri "page" Int32.to_string page in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as_list_of (JsonSupport.unwrap Reaction.of_yojson) resp body

let reactions_list_for_pull_request_review_comment ~owner ~repo ~comment_id ?content ?(per_page = 30l) ?(page = 1l) () =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "comment_id" Int32.to_string comment_id in
    let uri = Request.maybe_add_query_param uri "content" Enums.show_content content in
    let uri = Request.add_query_param uri "per_page" Int32.to_string per_page in
    let uri = Request.add_query_param uri "page" Int32.to_string page in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as_list_of (JsonSupport.unwrap Reaction.of_yojson) resp body

let reactions_list_for_team_discussion_comment_in_org ~org ~team_slug ~discussion_number ~comment_number ?content ?(per_page = 30l) ?(page = 1l) () =
    let open Lwt in
    let uri = Request.build_uri "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "org" (fun x -> x) org in
    let uri = Request.replace_path_param uri "team_slug" (fun x -> x) team_slug in
    let uri = Request.replace_path_param uri "discussion_number" Int32.to_string discussion_number in
    let uri = Request.replace_path_param uri "comment_number" Int32.to_string comment_number in
    let uri = Request.maybe_add_query_param uri "content" Enums.show_content content in
    let uri = Request.add_query_param uri "per_page" Int32.to_string per_page in
    let uri = Request.add_query_param uri "page" Int32.to_string page in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as_list_of (JsonSupport.unwrap Reaction.of_yojson) resp body

let reactions_list_for_team_discussion_comment_legacy ~team_id ~discussion_number ~comment_number ?content ?(per_page = 30l) ?(page = 1l) () =
    let open Lwt in
    let uri = Request.build_uri "/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "team_id" Int32.to_string team_id in
    let uri = Request.replace_path_param uri "discussion_number" Int32.to_string discussion_number in
    let uri = Request.replace_path_param uri "comment_number" Int32.to_string comment_number in
    let uri = Request.maybe_add_query_param uri "content" Enums.show_content content in
    let uri = Request.add_query_param uri "per_page" Int32.to_string per_page in
    let uri = Request.add_query_param uri "page" Int32.to_string page in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as_list_of (JsonSupport.unwrap Reaction.of_yojson) resp body

let reactions_list_for_team_discussion_in_org ~org ~team_slug ~discussion_number ?content ?(per_page = 30l) ?(page = 1l) () =
    let open Lwt in
    let uri = Request.build_uri "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "org" (fun x -> x) org in
    let uri = Request.replace_path_param uri "team_slug" (fun x -> x) team_slug in
    let uri = Request.replace_path_param uri "discussion_number" Int32.to_string discussion_number in
    let uri = Request.maybe_add_query_param uri "content" Enums.show_content content in
    let uri = Request.add_query_param uri "per_page" Int32.to_string per_page in
    let uri = Request.add_query_param uri "page" Int32.to_string page in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as_list_of (JsonSupport.unwrap Reaction.of_yojson) resp body

let reactions_list_for_team_discussion_legacy ~team_id ~discussion_number ?content ?(per_page = 30l) ?(page = 1l) () =
    let open Lwt in
    let uri = Request.build_uri "/teams/{team_id}/discussions/{discussion_number}/reactions" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "team_id" Int32.to_string team_id in
    let uri = Request.replace_path_param uri "discussion_number" Int32.to_string discussion_number in
    let uri = Request.maybe_add_query_param uri "content" Enums.show_content content in
    let uri = Request.add_query_param uri "per_page" Int32.to_string per_page in
    let uri = Request.add_query_param uri "page" Int32.to_string page in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as_list_of (JsonSupport.unwrap Reaction.of_yojson) resp body

