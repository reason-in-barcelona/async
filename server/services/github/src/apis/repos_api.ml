(*
 * This file has been generated by the OCamlClientCodegen generator for openapi-generator.
 *
 * Generated by: https://openapi-generator.tech
 *
 *)

let repos_accept_invitation ~invitation_id =
    let open Lwt in
    let uri = Request.build_uri "/user/repository_invitations/{invitation_id}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "invitation_id" Int32.to_string invitation_id in
    Cohttp_lwt_unix.Client.call `PATCH uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let repos_add_app_access_restrictions ~owner ~repo ~branch ~inline_object_74_t () =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "branch" (fun x -> x) branch in
    let body = Request.write_as_json_body Inline_object_74.to_yojson inline_object_74_t in
    Cohttp_lwt_unix.Client.call `POST uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as_list_of (JsonSupport.unwrap Integration.of_yojson) resp body

let repos_add_collaborator ~owner ~repo ~username ~inline_object_88_t () =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/collaborators/{username}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "username" (fun x -> x) username in
    let body = Request.write_as_json_body Inline_object_88.to_yojson inline_object_88_t in
    Cohttp_lwt_unix.Client.call `PUT uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Repository_invitation.of_yojson) resp body

let repos_add_status_check_contexts ~owner ~repo ~branch ~inline_object_71_t () =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "branch" (fun x -> x) branch in
    let body = Request.write_as_json_body Inline_object_71.to_yojson inline_object_71_t in
    Cohttp_lwt_unix.Client.call `POST uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as_list_of (JsonSupport.to_string) resp body

let repos_add_team_access_restrictions ~owner ~repo ~branch ~inline_object_77_t () =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "branch" (fun x -> x) branch in
    let body = Request.write_as_json_body Inline_object_77.to_yojson inline_object_77_t in
    Cohttp_lwt_unix.Client.call `POST uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as_list_of (JsonSupport.unwrap Team.of_yojson) resp body

let repos_add_user_access_restrictions ~owner ~repo ~branch ~inline_object_80_t () =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "branch" (fun x -> x) branch in
    let body = Request.write_as_json_body Inline_object_80.to_yojson inline_object_80_t in
    Cohttp_lwt_unix.Client.call `POST uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as_list_of (JsonSupport.unwrap Simple_user.of_yojson) resp body

let repos_check_collaborator ~owner ~repo ~username =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/collaborators/{username}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "username" (fun x -> x) username in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let repos_compare_commits ~owner ~repo ~base ~head =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/compare/{base}...{head}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "base" (fun x -> x) base in
    let uri = Request.replace_path_param uri "head" (fun x -> x) head in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Commit_comparison.of_yojson) resp body

let repos_create_commit_comment ~owner ~repo ~commit_sha ~inline_object_91_t () =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/commits/{commit_sha}/comments" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "commit_sha" (fun x -> x) commit_sha in
    let body = Request.write_as_json_body Inline_object_91.to_yojson inline_object_91_t in
    Cohttp_lwt_unix.Client.call `POST uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Commit_comment.of_yojson) resp body

let repos_create_commit_signature_protection ~owner ~repo ~branch =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "branch" (fun x -> x) branch in
    Cohttp_lwt_unix.Client.call `POST uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Protected_branch_admin_enforced.of_yojson) resp body

let repos_create_commit_status ~owner ~repo ~sha ~inline_object_145_t () =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/statuses/{sha}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "sha" (fun x -> x) sha in
    let body = Request.write_as_json_body Inline_object_145.to_yojson inline_object_145_t in
    Cohttp_lwt_unix.Client.call `POST uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Status.of_yojson) resp body

let repos_create_deploy_key ~owner ~repo ~inline_object_117_t () =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/keys" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let body = Request.write_as_json_body Inline_object_117.to_yojson inline_object_117_t in
    Cohttp_lwt_unix.Client.call `POST uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Deploy_key.of_yojson) resp body

let repos_create_deployment ~owner ~repo ~inline_object_94_t () =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/deployments" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let body = Request.write_as_json_body Inline_object_94.to_yojson inline_object_94_t in
    Cohttp_lwt_unix.Client.call `POST uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Deployment.of_yojson) resp body

let repos_create_deployment_status ~owner ~repo ~deployment_id ~inline_object_95_t () =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/deployments/{deployment_id}/statuses" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "deployment_id" Int32.to_string deployment_id in
    let body = Request.write_as_json_body Inline_object_95.to_yojson inline_object_95_t in
    Cohttp_lwt_unix.Client.call `POST uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Deployment_status.of_yojson) resp body

let repos_create_for_authenticated_user ~inline_object_171_t () =
    let open Lwt in
    let uri = Request.build_uri "/user/repos" in
    let headers = Request.default_headers in
    let body = Request.write_as_json_body Inline_object_171.to_yojson inline_object_171_t in
    Cohttp_lwt_unix.Client.call `POST uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Repository.of_yojson) resp body

let repos_create_fork ~owner ~repo ~inline_object_96_t () =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/forks" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let body = Request.write_as_json_body Inline_object_96.to_yojson inline_object_96_t in
    Cohttp_lwt_unix.Client.call `POST uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Repository.of_yojson) resp body

let repos_create_in_org ~org ~inline_object_45_t () =
    let open Lwt in
    let uri = Request.build_uri "/orgs/{org}/repos" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "org" (fun x -> x) org in
    let body = Request.write_as_json_body Inline_object_45.to_yojson inline_object_45_t in
    Cohttp_lwt_unix.Client.call `POST uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Repository.of_yojson) resp body

let repos_create_or_update_file_contents ~owner ~repo ~path ~inline_object_92_t () =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/contents/{path}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "path" (fun x -> x) path in
    let body = Request.write_as_json_body Inline_object_92.to_yojson inline_object_92_t in
    Cohttp_lwt_unix.Client.call `PUT uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap File_commit.of_yojson) resp body

let repos_create_pages_site ~owner ~repo ~inline_object_125_t () =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/pages" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let body = Request.write_as_json_body Inline_object_125.to_yojson inline_object_125_t in
    Cohttp_lwt_unix.Client.call `POST uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Page.of_yojson) resp body

let repos_create_release ~owner ~repo ~inline_object_142_t () =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/releases" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let body = Request.write_as_json_body Inline_object_142.to_yojson inline_object_142_t in
    Cohttp_lwt_unix.Client.call `POST uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Release.of_yojson) resp body

let repos_create_using_template ~template_owner ~template_repo ~inline_object_149_t () =
    let open Lwt in
    let uri = Request.build_uri "/repos/{template_owner}/{template_repo}/generate" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "template_owner" (fun x -> x) template_owner in
    let uri = Request.replace_path_param uri "template_repo" (fun x -> x) template_repo in
    let body = Request.write_as_json_body Inline_object_149.to_yojson inline_object_149_t in
    Cohttp_lwt_unix.Client.call `POST uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Repository.of_yojson) resp body

let repos_create_webhook ~owner ~repo ~inline_object_103_t () =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/hooks" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let body = Request.write_as_json_body Inline_object_103.to_yojson inline_object_103_t in
    Cohttp_lwt_unix.Client.call `POST uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Hook.of_yojson) resp body

let repos_decline_invitation ~invitation_id =
    let open Lwt in
    let uri = Request.build_uri "/user/repository_invitations/{invitation_id}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "invitation_id" Int32.to_string invitation_id in
    Cohttp_lwt_unix.Client.call `DELETE uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let repos_delete ~owner ~repo =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    Cohttp_lwt_unix.Client.call `DELETE uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let repos_delete_access_restrictions ~owner ~repo ~branch =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "branch" (fun x -> x) branch in
    Cohttp_lwt_unix.Client.call `DELETE uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let repos_delete_admin_branch_protection ~owner ~repo ~branch =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "branch" (fun x -> x) branch in
    Cohttp_lwt_unix.Client.call `DELETE uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let repos_delete_branch_protection ~owner ~repo ~branch =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/branches/{branch}/protection" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "branch" (fun x -> x) branch in
    Cohttp_lwt_unix.Client.call `DELETE uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let repos_delete_commit_comment ~owner ~repo ~comment_id =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/comments/{comment_id}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "comment_id" Int32.to_string comment_id in
    Cohttp_lwt_unix.Client.call `DELETE uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let repos_delete_commit_signature_protection ~owner ~repo ~branch =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "branch" (fun x -> x) branch in
    Cohttp_lwt_unix.Client.call `DELETE uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let repos_delete_deploy_key ~owner ~repo ~key_id =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/keys/{key_id}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "key_id" Int32.to_string key_id in
    Cohttp_lwt_unix.Client.call `DELETE uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let repos_delete_deployment ~owner ~repo ~deployment_id =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/deployments/{deployment_id}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "deployment_id" Int32.to_string deployment_id in
    Cohttp_lwt_unix.Client.call `DELETE uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let repos_delete_file ~owner ~repo ~path ~inline_object_93_t () =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/contents/{path}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "path" (fun x -> x) path in
    let body = Request.write_as_json_body Inline_object_93.to_yojson inline_object_93_t in
    Cohttp_lwt_unix.Client.call `DELETE uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap File_commit.of_yojson) resp body

let repos_delete_invitation ~owner ~repo ~invitation_id =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/invitations/{invitation_id}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "invitation_id" Int32.to_string invitation_id in
    Cohttp_lwt_unix.Client.call `DELETE uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let repos_delete_pages_site ~owner ~repo =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/pages" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    Cohttp_lwt_unix.Client.call `DELETE uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let repos_delete_pull_request_review_protection ~owner ~repo ~branch =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "branch" (fun x -> x) branch in
    Cohttp_lwt_unix.Client.call `DELETE uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let repos_delete_release ~owner ~repo ~release_id =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/releases/{release_id}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "release_id" Int32.to_string release_id in
    Cohttp_lwt_unix.Client.call `DELETE uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let repos_delete_release_asset ~owner ~repo ~asset_id =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/releases/assets/{asset_id}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "asset_id" Int32.to_string asset_id in
    Cohttp_lwt_unix.Client.call `DELETE uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let repos_delete_webhook ~owner ~repo ~hook_id =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/hooks/{hook_id}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "hook_id" Int32.to_string hook_id in
    Cohttp_lwt_unix.Client.call `DELETE uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let repos_disable_vulnerability_alerts ~owner ~repo =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/vulnerability-alerts" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    Cohttp_lwt_unix.Client.call `DELETE uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let repos_download_tarball_archive ~owner ~repo ~ref =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/tarball/{ref}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "ref" (fun x -> x) ref in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let repos_download_zipball_archive ~owner ~repo ~ref =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/zipball/{ref}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "ref" (fun x -> x) ref in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let repos_enable_vulnerability_alerts ~owner ~repo =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/vulnerability-alerts" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    Cohttp_lwt_unix.Client.call `PUT uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let repos_get ~owner ~repo =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Full_repository.of_yojson) resp body

let repos_get_access_restrictions ~owner ~repo ~branch =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "branch" (fun x -> x) branch in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Branch_restriction_policy.of_yojson) resp body

let repos_get_admin_branch_protection ~owner ~repo ~branch =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "branch" (fun x -> x) branch in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Protected_branch_admin_enforced.of_yojson) resp body

let repos_get_all_status_check_contexts ~owner ~repo ~branch =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "branch" (fun x -> x) branch in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as_list_of (JsonSupport.to_string) resp body

let repos_get_all_topics ~owner ~repo =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/topics" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Topic.of_yojson) resp body

let repos_get_apps_with_access_to_protected_branch ~owner ~repo ~branch =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "branch" (fun x -> x) branch in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as_list_of (JsonSupport.unwrap Integration.of_yojson) resp body

let repos_get_branch ~owner ~repo ~branch =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/branches/{branch}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "branch" (fun x -> x) branch in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Branch_with_protection.of_yojson) resp body

let repos_get_branch_protection ~owner ~repo ~branch =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/branches/{branch}/protection" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "branch" (fun x -> x) branch in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Branch_protection.of_yojson) resp body

let repos_get_code_frequency_stats ~owner ~repo =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/stats/code_frequency" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as_list_of (JsonSupport.unwrap Array.of_yojson) resp body

let repos_get_collaborator_permission_level ~owner ~repo ~username =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/collaborators/{username}/permission" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "username" (fun x -> x) username in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Repository_collaborator_permission.of_yojson) resp body

let repos_get_combined_status_for_ref ~owner ~repo ~ref =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/commits/{ref}/status" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "ref" (fun x -> x) ref in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Combined_commit_status.of_yojson) resp body

let repos_get_commit ~owner ~repo ~ref =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/commits/{ref}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "ref" (fun x -> x) ref in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Commit.of_yojson) resp body

let repos_get_commit_activity_stats ~owner ~repo =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/stats/commit_activity" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as_list_of (JsonSupport.unwrap Commit_activity.of_yojson) resp body

let repos_get_commit_comment ~owner ~repo ~comment_id =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/comments/{comment_id}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "comment_id" Int32.to_string comment_id in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Commit_comment.of_yojson) resp body

let repos_get_commit_signature_protection ~owner ~repo ~branch =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "branch" (fun x -> x) branch in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Protected_branch_admin_enforced.of_yojson) resp body

let repos_get_content ~owner ~repo ~path ?ref () =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/contents/{path}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "path" (fun x -> x) path in
    let uri = Request.maybe_add_query_param uri "ref" (fun x -> x) ref in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Content_tree.of_yojson) resp body

let repos_get_contributors_stats ~owner ~repo =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/stats/contributors" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as_list_of (JsonSupport.unwrap Contributor_activity.of_yojson) resp body

let repos_get_deploy_key ~owner ~repo ~key_id =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/keys/{key_id}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "key_id" Int32.to_string key_id in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Deploy_key.of_yojson) resp body

let repos_get_deployment ~owner ~repo ~deployment_id =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/deployments/{deployment_id}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "deployment_id" Int32.to_string deployment_id in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Deployment.of_yojson) resp body

let repos_get_deployment_status ~owner ~repo ~deployment_id ~status_id =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "deployment_id" Int32.to_string deployment_id in
    let uri = Request.replace_path_param uri "status_id" Int32.to_string status_id in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Deployment_status.of_yojson) resp body

let repos_get_latest_pages_build ~owner ~repo =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/pages/builds/latest" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Page_build.of_yojson) resp body

let repos_get_latest_release ~owner ~repo =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/releases/latest" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Release.of_yojson) resp body

let repos_get_pages ~owner ~repo =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/pages" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Page.of_yojson) resp body

let repos_get_pages_build ~owner ~repo ~build_id =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/pages/builds/{build_id}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "build_id" Int32.to_string build_id in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Page_build.of_yojson) resp body

let repos_get_participation_stats ~owner ~repo =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/stats/participation" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Participation_stats.of_yojson) resp body

let repos_get_pull_request_review_protection ~owner ~repo ~branch =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "branch" (fun x -> x) branch in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Protected_branch_pull_request_review.of_yojson) resp body

let repos_get_punch_card_stats ~owner ~repo =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/stats/punch_card" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as_list_of (JsonSupport.unwrap Array.of_yojson) resp body

let repos_get_readme ~owner ~repo ?ref () =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/readme" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.maybe_add_query_param uri "ref" (fun x -> x) ref in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Content_file.of_yojson) resp body

let repos_get_release ~owner ~repo ~release_id =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/releases/{release_id}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "release_id" Int32.to_string release_id in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Release.of_yojson) resp body

let repos_get_release_asset ~owner ~repo ~asset_id =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/releases/assets/{asset_id}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "asset_id" Int32.to_string asset_id in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Release_asset.of_yojson) resp body

let repos_get_release_by_tag ~owner ~repo ~tag =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/releases/tags/{tag}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "tag" (fun x -> x) tag in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Release.of_yojson) resp body

let repos_get_status_checks_protection ~owner ~repo ~branch =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "branch" (fun x -> x) branch in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Status_check_policy.of_yojson) resp body

let repos_get_teams_with_access_to_protected_branch ~owner ~repo ~branch =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "branch" (fun x -> x) branch in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as_list_of (JsonSupport.unwrap Team.of_yojson) resp body

let repos_get_users_with_access_to_protected_branch ~owner ~repo ~branch =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "branch" (fun x -> x) branch in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as_list_of (JsonSupport.unwrap Simple_user.of_yojson) resp body

let repos_get_webhook ~owner ~repo ~hook_id =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/hooks/{hook_id}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "hook_id" Int32.to_string hook_id in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Hook.of_yojson) resp body

let repos_list_branches ~owner ~repo ?protected ?(per_page = 30l) ?(page = 1l) () =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/branches" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.maybe_add_query_param uri "protected" string_of_bool protected in
    let uri = Request.add_query_param uri "per_page" Int32.to_string per_page in
    let uri = Request.add_query_param uri "page" Int32.to_string page in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as_list_of (JsonSupport.unwrap Short_branch.of_yojson) resp body

let repos_list_branches_for_head_commit ~owner ~repo ~commit_sha =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "commit_sha" (fun x -> x) commit_sha in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as_list_of (JsonSupport.unwrap Branch_short.of_yojson) resp body

let repos_list_collaborators ~owner ~repo ?(affiliation = `All) ?(per_page = 30l) ?(page = 1l) () =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/collaborators" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.add_query_param uri "affiliation" Enums.show_affiliation affiliation in
    let uri = Request.add_query_param uri "per_page" Int32.to_string per_page in
    let uri = Request.add_query_param uri "page" Int32.to_string page in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as_list_of (JsonSupport.unwrap Collaborator.of_yojson) resp body

let repos_list_comments_for_commit ~owner ~repo ~commit_sha ?(per_page = 30l) ?(page = 1l) () =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/commits/{commit_sha}/comments" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "commit_sha" (fun x -> x) commit_sha in
    let uri = Request.add_query_param uri "per_page" Int32.to_string per_page in
    let uri = Request.add_query_param uri "page" Int32.to_string page in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as_list_of (JsonSupport.unwrap Commit_comment.of_yojson) resp body

let repos_list_commit_comments_for_repo ~owner ~repo ?(per_page = 30l) ?(page = 1l) () =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/comments" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.add_query_param uri "per_page" Int32.to_string per_page in
    let uri = Request.add_query_param uri "page" Int32.to_string page in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as_list_of (JsonSupport.unwrap Commit_comment.of_yojson) resp body

let repos_list_commit_statuses_for_ref ~owner ~repo ~ref ?(per_page = 30l) ?(page = 1l) () =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/commits/{ref}/statuses" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "ref" (fun x -> x) ref in
    let uri = Request.add_query_param uri "per_page" Int32.to_string per_page in
    let uri = Request.add_query_param uri "page" Int32.to_string page in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as_list_of (JsonSupport.unwrap Status.of_yojson) resp body

let repos_list_commits ~owner ~repo ?sha ?path ?author ?since ?until ?(per_page = 30l) ?(page = 1l) () =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/commits" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.maybe_add_query_param uri "sha" (fun x -> x) sha in
    let uri = Request.maybe_add_query_param uri "path" (fun x -> x) path in
    let uri = Request.maybe_add_query_param uri "author" (fun x -> x) author in
    let uri = Request.maybe_add_query_param uri "since" (fun x -> x) since in
    let uri = Request.maybe_add_query_param uri "until" (fun x -> x) until in
    let uri = Request.add_query_param uri "per_page" Int32.to_string per_page in
    let uri = Request.add_query_param uri "page" Int32.to_string page in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as_list_of (JsonSupport.unwrap Commit.of_yojson) resp body

let repos_list_contributors ~owner ~repo ?anon ?(per_page = 30l) ?(page = 1l) () =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/contributors" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.maybe_add_query_param uri "anon" (fun x -> x) anon in
    let uri = Request.add_query_param uri "per_page" Int32.to_string per_page in
    let uri = Request.add_query_param uri "page" Int32.to_string page in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as_list_of (JsonSupport.unwrap Contributor.of_yojson) resp body

let repos_list_deploy_keys ~owner ~repo ?(per_page = 30l) ?(page = 1l) () =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/keys" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.add_query_param uri "per_page" Int32.to_string per_page in
    let uri = Request.add_query_param uri "page" Int32.to_string page in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as_list_of (JsonSupport.unwrap Deploy_key.of_yojson) resp body

let repos_list_deployment_statuses ~owner ~repo ~deployment_id ?(per_page = 30l) ?(page = 1l) () =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/deployments/{deployment_id}/statuses" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "deployment_id" Int32.to_string deployment_id in
    let uri = Request.add_query_param uri "per_page" Int32.to_string per_page in
    let uri = Request.add_query_param uri "page" Int32.to_string page in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as_list_of (JsonSupport.unwrap Deployment_status.of_yojson) resp body

let repos_list_deployments ~owner ~repo ?(sha = "none") ?(ref = "none") ?(task = "none") ?(environment = "none") ?(per_page = 30l) ?(page = 1l) () =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/deployments" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.add_query_param uri "sha" (fun x -> x) sha in
    let uri = Request.add_query_param uri "ref" (fun x -> x) ref in
    let uri = Request.add_query_param uri "task" (fun x -> x) task in
    let uri = Request.add_query_param uri "environment" (fun x -> x) environment in
    let uri = Request.add_query_param uri "per_page" Int32.to_string per_page in
    let uri = Request.add_query_param uri "page" Int32.to_string page in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as_list_of (JsonSupport.unwrap Deployment.of_yojson) resp body

let repos_list_for_authenticated_user ?(visibility = `All) ?(affiliation = "owner,collaborator,organization_member") ?(_type = `All) ?(sort = `Full_name) ?direction ?(per_page = 30l) ?(page = 1l) ?since ?before () =
    let open Lwt in
    let uri = Request.build_uri "/user/repos" in
    let headers = Request.default_headers in
    let uri = Request.add_query_param uri "visibility" Enums.show_visibility visibility in
    let uri = Request.add_query_param uri "affiliation" (fun x -> x) affiliation in
    let uri = Request.add_query_param uri "type" Enums.show_type_0 _type in
    let uri = Request.add_query_param uri "sort" Enums.show_sort_8 sort in
    let uri = Request.maybe_add_query_param uri "direction" Enums.show_direction direction in
    let uri = Request.add_query_param uri "per_page" Int32.to_string per_page in
    let uri = Request.add_query_param uri "page" Int32.to_string page in
    let uri = Request.maybe_add_query_param uri "since" (fun x -> x) since in
    let uri = Request.maybe_add_query_param uri "before" (fun x -> x) before in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as_list_of (JsonSupport.unwrap Repository.of_yojson) resp body

let repos_list_for_org ~org ?_type ?(sort = `Created) ?direction ?(per_page = 30l) ?(page = 1l) () =
    let open Lwt in
    let uri = Request.build_uri "/orgs/{org}/repos" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "org" (fun x -> x) org in
    let uri = Request.maybe_add_query_param uri "type" Enums.show_type_2 _type in
    let uri = Request.add_query_param uri "sort" Enums.show_sort_8 sort in
    let uri = Request.maybe_add_query_param uri "direction" Enums.show_direction direction in
    let uri = Request.add_query_param uri "per_page" Int32.to_string per_page in
    let uri = Request.add_query_param uri "page" Int32.to_string page in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as_list_of (JsonSupport.unwrap Minimal_repository.of_yojson) resp body

let repos_list_for_user ~username ?(_type = `Owner) ?(sort = `Full_name) ?direction ?(per_page = 30l) ?(page = 1l) () =
    let open Lwt in
    let uri = Request.build_uri "/users/{username}/repos" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "username" (fun x -> x) username in
    let uri = Request.add_query_param uri "type" Enums.show_type_1 _type in
    let uri = Request.add_query_param uri "sort" Enums.show_sort_8 sort in
    let uri = Request.maybe_add_query_param uri "direction" Enums.show_direction direction in
    let uri = Request.add_query_param uri "per_page" Int32.to_string per_page in
    let uri = Request.add_query_param uri "page" Int32.to_string page in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as_list_of (JsonSupport.unwrap Minimal_repository.of_yojson) resp body

let repos_list_forks ~owner ~repo ?(sort = `Newest) ?(per_page = 30l) ?(page = 1l) () =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/forks" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.add_query_param uri "sort" Enums.show_sort_4 sort in
    let uri = Request.add_query_param uri "per_page" Int32.to_string per_page in
    let uri = Request.add_query_param uri "page" Int32.to_string page in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as_list_of (JsonSupport.unwrap Minimal_repository.of_yojson) resp body

let repos_list_invitations ~owner ~repo ?(per_page = 30l) ?(page = 1l) () =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/invitations" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.add_query_param uri "per_page" Int32.to_string per_page in
    let uri = Request.add_query_param uri "page" Int32.to_string page in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as_list_of (JsonSupport.unwrap Repository_invitation.of_yojson) resp body

let repos_list_invitations_for_authenticated_user ?(per_page = 30l) ?(page = 1l) () =
    let open Lwt in
    let uri = Request.build_uri "/user/repository_invitations" in
    let headers = Request.default_headers in
    let uri = Request.add_query_param uri "per_page" Int32.to_string per_page in
    let uri = Request.add_query_param uri "page" Int32.to_string page in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as_list_of (JsonSupport.unwrap Repository_invitation.of_yojson) resp body

let repos_list_languages ~owner ~repo =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/languages" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as_map_of (JsonSupport.to_int32) resp body

let repos_list_pages_builds ~owner ~repo ?(per_page = 30l) ?(page = 1l) () =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/pages/builds" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.add_query_param uri "per_page" Int32.to_string per_page in
    let uri = Request.add_query_param uri "page" Int32.to_string page in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as_list_of (JsonSupport.unwrap Page_build.of_yojson) resp body

let repos_list_public ?since ?(visibility = `Public) () =
    let open Lwt in
    let uri = Request.build_uri "/repositories" in
    let headers = Request.default_headers in
    let uri = Request.maybe_add_query_param uri "since" Int32.to_string since in
    let uri = Request.add_query_param uri "visibility" Enums.show_visibility_0 visibility in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as_list_of (JsonSupport.unwrap Minimal_repository.of_yojson) resp body

let repos_list_pull_requests_associated_with_commit ~owner ~repo ~commit_sha ?(per_page = 30l) ?(page = 1l) () =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/commits/{commit_sha}/pulls" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "commit_sha" (fun x -> x) commit_sha in
    let uri = Request.add_query_param uri "per_page" Int32.to_string per_page in
    let uri = Request.add_query_param uri "page" Int32.to_string page in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as_list_of (JsonSupport.unwrap Pull_request_simple.of_yojson) resp body

let repos_list_release_assets ~owner ~repo ~release_id ?(per_page = 30l) ?(page = 1l) () =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/releases/{release_id}/assets" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "release_id" Int32.to_string release_id in
    let uri = Request.add_query_param uri "per_page" Int32.to_string per_page in
    let uri = Request.add_query_param uri "page" Int32.to_string page in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as_list_of (JsonSupport.unwrap Release_asset.of_yojson) resp body

let repos_list_releases ~owner ~repo ?(per_page = 30l) ?(page = 1l) () =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/releases" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.add_query_param uri "per_page" Int32.to_string per_page in
    let uri = Request.add_query_param uri "page" Int32.to_string page in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as_list_of (JsonSupport.unwrap Release.of_yojson) resp body

let repos_list_tags ~owner ~repo ?(per_page = 30l) ?(page = 1l) () =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/tags" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.add_query_param uri "per_page" Int32.to_string per_page in
    let uri = Request.add_query_param uri "page" Int32.to_string page in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as_list_of (JsonSupport.unwrap Tag.of_yojson) resp body

let repos_list_teams ~owner ~repo ?(per_page = 30l) ?(page = 1l) () =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/teams" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.add_query_param uri "per_page" Int32.to_string per_page in
    let uri = Request.add_query_param uri "page" Int32.to_string page in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as_list_of (JsonSupport.unwrap Team.of_yojson) resp body

let repos_list_webhooks ~owner ~repo ?(per_page = 30l) ?(page = 1l) () =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/hooks" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.add_query_param uri "per_page" Int32.to_string per_page in
    let uri = Request.add_query_param uri "page" Int32.to_string page in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as_list_of (JsonSupport.unwrap Hook.of_yojson) resp body

let repos_merge ~owner ~repo ~inline_object_120_t () =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/merges" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let body = Request.write_as_json_body Inline_object_120.to_yojson inline_object_120_t in
    Cohttp_lwt_unix.Client.call `POST uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Commit.of_yojson) resp body

let repos_ping_webhook ~owner ~repo ~hook_id =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/hooks/{hook_id}/pings" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "hook_id" Int32.to_string hook_id in
    Cohttp_lwt_unix.Client.call `POST uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let repos_remove_app_access_restrictions ~owner ~repo ~branch ~inline_object_75_t () =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "branch" (fun x -> x) branch in
    let body = Request.write_as_json_body Inline_object_75.to_yojson inline_object_75_t in
    Cohttp_lwt_unix.Client.call `DELETE uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as_list_of (JsonSupport.unwrap Integration.of_yojson) resp body

let repos_remove_collaborator ~owner ~repo ~username =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/collaborators/{username}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "username" (fun x -> x) username in
    Cohttp_lwt_unix.Client.call `DELETE uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let repos_remove_status_check_contexts ~owner ~repo ~branch ~inline_object_72_t () =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "branch" (fun x -> x) branch in
    let body = Request.write_as_json_body Inline_object_72.to_yojson inline_object_72_t in
    Cohttp_lwt_unix.Client.call `DELETE uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as_list_of (JsonSupport.to_string) resp body

let repos_remove_status_check_protection ~owner ~repo ~branch =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "branch" (fun x -> x) branch in
    Cohttp_lwt_unix.Client.call `DELETE uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let repos_remove_team_access_restrictions ~owner ~repo ~branch ~inline_object_78_t () =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "branch" (fun x -> x) branch in
    let body = Request.write_as_json_body Inline_object_78.to_yojson inline_object_78_t in
    Cohttp_lwt_unix.Client.call `DELETE uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as_list_of (JsonSupport.unwrap Team.of_yojson) resp body

let repos_remove_user_access_restrictions ~owner ~repo ~branch ~inline_object_81_t () =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "branch" (fun x -> x) branch in
    let body = Request.write_as_json_body Inline_object_81.to_yojson inline_object_81_t in
    Cohttp_lwt_unix.Client.call `DELETE uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as_list_of (JsonSupport.unwrap Simple_user.of_yojson) resp body

let repos_replace_all_topics ~owner ~repo ~inline_object_147_t () =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/topics" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let body = Request.write_as_json_body Inline_object_147.to_yojson inline_object_147_t in
    Cohttp_lwt_unix.Client.call `PUT uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Topic.of_yojson) resp body

let repos_request_pages_build ~owner ~repo =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/pages/builds" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    Cohttp_lwt_unix.Client.call `POST uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Page_build_status.of_yojson) resp body

let repos_set_admin_branch_protection ~owner ~repo ~branch =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "branch" (fun x -> x) branch in
    Cohttp_lwt_unix.Client.call `POST uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Protected_branch_admin_enforced.of_yojson) resp body

let repos_set_app_access_restrictions ~owner ~repo ~branch ~inline_object_73_t () =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "branch" (fun x -> x) branch in
    let body = Request.write_as_json_body Inline_object_73.to_yojson inline_object_73_t in
    Cohttp_lwt_unix.Client.call `PUT uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as_list_of (JsonSupport.unwrap Integration.of_yojson) resp body

let repos_set_status_check_contexts ~owner ~repo ~branch ~inline_object_70_t () =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "branch" (fun x -> x) branch in
    let body = Request.write_as_json_body Inline_object_70.to_yojson inline_object_70_t in
    Cohttp_lwt_unix.Client.call `PUT uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as_list_of (JsonSupport.to_string) resp body

let repos_set_team_access_restrictions ~owner ~repo ~branch ~inline_object_76_t () =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "branch" (fun x -> x) branch in
    let body = Request.write_as_json_body Inline_object_76.to_yojson inline_object_76_t in
    Cohttp_lwt_unix.Client.call `PUT uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as_list_of (JsonSupport.unwrap Team.of_yojson) resp body

let repos_set_user_access_restrictions ~owner ~repo ~branch ~inline_object_79_t () =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "branch" (fun x -> x) branch in
    let body = Request.write_as_json_body Inline_object_79.to_yojson inline_object_79_t in
    Cohttp_lwt_unix.Client.call `PUT uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as_list_of (JsonSupport.unwrap Simple_user.of_yojson) resp body

let repos_test_push_webhook ~owner ~repo ~hook_id =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/hooks/{hook_id}/tests" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "hook_id" Int32.to_string hook_id in
    Cohttp_lwt_unix.Client.call `POST uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let repos_transfer ~owner ~repo ~inline_object_148_t () =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/transfer" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let body = Request.write_as_json_body Inline_object_148.to_yojson inline_object_148_t in
    Cohttp_lwt_unix.Client.call `POST uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Repository.of_yojson) resp body

let repos_update ~owner ~repo ~inline_object_64_t () =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let body = Request.write_as_json_body Inline_object_64.to_yojson inline_object_64_t in
    Cohttp_lwt_unix.Client.call `PATCH uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Full_repository.of_yojson) resp body

let repos_update_branch_protection ~owner ~repo ~branch ~inline_object_67_t () =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/branches/{branch}/protection" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "branch" (fun x -> x) branch in
    let body = Request.write_as_json_body Inline_object_67.to_yojson inline_object_67_t in
    Cohttp_lwt_unix.Client.call `PUT uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Protected_branch.of_yojson) resp body

let repos_update_commit_comment ~owner ~repo ~comment_id ~inline_object_89_t () =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/comments/{comment_id}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "comment_id" Int32.to_string comment_id in
    let body = Request.write_as_json_body Inline_object_89.to_yojson inline_object_89_t in
    Cohttp_lwt_unix.Client.call `PATCH uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Commit_comment.of_yojson) resp body

let repos_update_information_about_pages_site ~owner ~repo ~inline_object_124_t () =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/pages" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let body = Request.write_as_json_body Inline_object_124.to_yojson inline_object_124_t in
    Cohttp_lwt_unix.Client.call `PUT uri ~headers ~body >>= fun (resp, body) ->
    Request.handle_unit_response resp

let repos_update_invitation ~owner ~repo ~invitation_id ~inline_object_105_t () =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/invitations/{invitation_id}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "invitation_id" Int32.to_string invitation_id in
    let body = Request.write_as_json_body Inline_object_105.to_yojson inline_object_105_t in
    Cohttp_lwt_unix.Client.call `PATCH uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Repository_invitation.of_yojson) resp body

let repos_update_pull_request_review_protection ~owner ~repo ~branch ~inline_object_68_t () =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "branch" (fun x -> x) branch in
    let body = Request.write_as_json_body Inline_object_68.to_yojson inline_object_68_t in
    Cohttp_lwt_unix.Client.call `PATCH uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Protected_branch_pull_request_review.of_yojson) resp body

let repos_update_release ~owner ~repo ~release_id ~inline_object_144_t () =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/releases/{release_id}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "release_id" Int32.to_string release_id in
    let body = Request.write_as_json_body Inline_object_144.to_yojson inline_object_144_t in
    Cohttp_lwt_unix.Client.call `PATCH uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Release.of_yojson) resp body

let repos_update_release_asset ~owner ~repo ~asset_id ~inline_object_143_t () =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/releases/assets/{asset_id}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "asset_id" Int32.to_string asset_id in
    let body = Request.write_as_json_body Inline_object_143.to_yojson inline_object_143_t in
    Cohttp_lwt_unix.Client.call `PATCH uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Release_asset.of_yojson) resp body

let repos_update_status_check_protection ~owner ~repo ~branch ~inline_object_69_t () =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "branch" (fun x -> x) branch in
    let body = Request.write_as_json_body Inline_object_69.to_yojson inline_object_69_t in
    Cohttp_lwt_unix.Client.call `PATCH uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Status_check_policy.of_yojson) resp body

let repos_update_webhook ~owner ~repo ~hook_id ~inline_object_104_t () =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/hooks/{hook_id}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "hook_id" Int32.to_string hook_id in
    let body = Request.write_as_json_body Inline_object_104.to_yojson inline_object_104_t in
    Cohttp_lwt_unix.Client.call `PATCH uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Hook.of_yojson) resp body

let repos_upload_release_asset ~owner ~repo ~release_id ?name ?label ~body () =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/releases/{release_id}/assets" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "release_id" Int32.to_string release_id in
    let uri = Request.maybe_add_query_param uri "name" (fun x -> x) name in
    let uri = Request.maybe_add_query_param uri "label" (fun x -> x) label in
    let body = Request.write_as_json_body JsonSupport.of_string body in
    Cohttp_lwt_unix.Client.call `POST uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Release_asset.of_yojson) resp body

