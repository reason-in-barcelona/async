(*
 * This file has been generated by the OCamlClientCodegen generator for openapi-generator.
 *
 * Generated by: https://openapi-generator.tech
 *
 *)

let actions_add_repo_access_to_self_hosted_runner_group_in_org ~org ~runner_group_id ~repository_id =
    let open Lwt in
    let uri = Request.build_uri "/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories/{repository_id}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "org" (fun x -> x) org in
    let uri = Request.replace_path_param uri "runner_group_id" Int32.to_string runner_group_id in
    let uri = Request.replace_path_param uri "repository_id" Int32.to_string repository_id in
    Cohttp_lwt_unix.Client.call `PUT uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let actions_add_selected_repo_to_org_secret ~org ~secret_name ~repository_id =
    let open Lwt in
    let uri = Request.build_uri "/orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "org" (fun x -> x) org in
    let uri = Request.replace_path_param uri "secret_name" (fun x -> x) secret_name in
    let uri = Request.replace_path_param uri "repository_id" Int32.to_string repository_id in
    Cohttp_lwt_unix.Client.call `PUT uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let actions_add_self_hosted_runner_to_group_for_org ~org ~runner_group_id ~runner_id =
    let open Lwt in
    let uri = Request.build_uri "/orgs/{org}/actions/runner-groups/{runner_group_id}/runners/{runner_id}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "org" (fun x -> x) org in
    let uri = Request.replace_path_param uri "runner_group_id" Int32.to_string runner_group_id in
    let uri = Request.replace_path_param uri "runner_id" Int32.to_string runner_id in
    Cohttp_lwt_unix.Client.call `PUT uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let actions_cancel_workflow_run ~owner ~repo ~run_id =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/actions/runs/{run_id}/cancel" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "run_id" Int32.to_string run_id in
    Cohttp_lwt_unix.Client.call `POST uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let actions_create_or_update_org_secret ~org ~secret_name ~inline_object_38_t () =
    let open Lwt in
    let uri = Request.build_uri "/orgs/{org}/actions/secrets/{secret_name}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "org" (fun x -> x) org in
    let uri = Request.replace_path_param uri "secret_name" (fun x -> x) secret_name in
    let body = Request.write_as_json_body Inline_object_38.to_yojson inline_object_38_t in
    Cohttp_lwt_unix.Client.call `PUT uri ~headers ~body >>= fun (resp, body) ->
    Request.handle_unit_response resp

let actions_create_or_update_repo_secret ~owner ~repo ~secret_name ~inline_object_65_t () =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/actions/secrets/{secret_name}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "secret_name" (fun x -> x) secret_name in
    let body = Request.write_as_json_body Inline_object_65.to_yojson inline_object_65_t in
    Cohttp_lwt_unix.Client.call `PUT uri ~headers ~body >>= fun (resp, body) ->
    Request.handle_unit_response resp

let actions_create_registration_token_for_org ~org =
    let open Lwt in
    let uri = Request.build_uri "/orgs/{org}/actions/runners/registration-token" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "org" (fun x -> x) org in
    Cohttp_lwt_unix.Client.call `POST uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Authentication_token.of_yojson) resp body

let actions_create_registration_token_for_repo ~owner ~repo =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/actions/runners/registration-token" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    Cohttp_lwt_unix.Client.call `POST uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Authentication_token.of_yojson) resp body

let actions_create_remove_token_for_org ~org =
    let open Lwt in
    let uri = Request.build_uri "/orgs/{org}/actions/runners/remove-token" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "org" (fun x -> x) org in
    Cohttp_lwt_unix.Client.call `POST uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Authentication_token.of_yojson) resp body

let actions_create_remove_token_for_repo ~owner ~repo =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/actions/runners/remove-token" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    Cohttp_lwt_unix.Client.call `POST uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Authentication_token.of_yojson) resp body

let actions_create_self_hosted_runner_group_for_org ~org ~inline_object_34_t () =
    let open Lwt in
    let uri = Request.build_uri "/orgs/{org}/actions/runner-groups" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "org" (fun x -> x) org in
    let body = Request.write_as_json_body Inline_object_34.to_yojson inline_object_34_t in
    Cohttp_lwt_unix.Client.call `POST uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Runner_groups_org.of_yojson) resp body

let actions_create_workflow_dispatch ~owner ~repo ~workflow_id ~inline_object_66_t () =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "workflow_id" .show workflow_id in
    let body = Request.write_as_json_body Inline_object_66.to_yojson inline_object_66_t in
    Cohttp_lwt_unix.Client.call `POST uri ~headers ~body >>= fun (resp, body) ->
    Request.handle_unit_response resp

let actions_delete_artifact ~owner ~repo ~artifact_id =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/actions/artifacts/{artifact_id}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "artifact_id" Int32.to_string artifact_id in
    Cohttp_lwt_unix.Client.call `DELETE uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let actions_delete_org_secret ~org ~secret_name =
    let open Lwt in
    let uri = Request.build_uri "/orgs/{org}/actions/secrets/{secret_name}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "org" (fun x -> x) org in
    let uri = Request.replace_path_param uri "secret_name" (fun x -> x) secret_name in
    Cohttp_lwt_unix.Client.call `DELETE uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let actions_delete_repo_secret ~owner ~repo ~secret_name =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/actions/secrets/{secret_name}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "secret_name" (fun x -> x) secret_name in
    Cohttp_lwt_unix.Client.call `DELETE uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let actions_delete_self_hosted_runner_from_org ~org ~runner_id =
    let open Lwt in
    let uri = Request.build_uri "/orgs/{org}/actions/runners/{runner_id}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "org" (fun x -> x) org in
    let uri = Request.replace_path_param uri "runner_id" Int32.to_string runner_id in
    Cohttp_lwt_unix.Client.call `DELETE uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let actions_delete_self_hosted_runner_from_repo ~owner ~repo ~runner_id =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/actions/runners/{runner_id}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "runner_id" Int32.to_string runner_id in
    Cohttp_lwt_unix.Client.call `DELETE uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let actions_delete_self_hosted_runner_group_from_org ~org ~runner_group_id =
    let open Lwt in
    let uri = Request.build_uri "/orgs/{org}/actions/runner-groups/{runner_group_id}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "org" (fun x -> x) org in
    let uri = Request.replace_path_param uri "runner_group_id" Int32.to_string runner_group_id in
    Cohttp_lwt_unix.Client.call `DELETE uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let actions_delete_workflow_run ~owner ~repo ~run_id =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/actions/runs/{run_id}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "run_id" Int32.to_string run_id in
    Cohttp_lwt_unix.Client.call `DELETE uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let actions_delete_workflow_run_logs ~owner ~repo ~run_id =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/actions/runs/{run_id}/logs" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "run_id" Int32.to_string run_id in
    Cohttp_lwt_unix.Client.call `DELETE uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let actions_download_artifact ~owner ~repo ~artifact_id ~archive_format =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "artifact_id" Int32.to_string artifact_id in
    let uri = Request.replace_path_param uri "archive_format" (fun x -> x) archive_format in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let actions_download_job_logs_for_workflow_run ~owner ~repo ~job_id =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/actions/jobs/{job_id}/logs" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "job_id" Int32.to_string job_id in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let actions_download_workflow_run_logs ~owner ~repo ~run_id =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/actions/runs/{run_id}/logs" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "run_id" Int32.to_string run_id in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let actions_get_artifact ~owner ~repo ~artifact_id =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/actions/artifacts/{artifact_id}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "artifact_id" Int32.to_string artifact_id in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Artifact.of_yojson) resp body

let actions_get_job_for_workflow_run ~owner ~repo ~job_id =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/actions/jobs/{job_id}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "job_id" Int32.to_string job_id in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Job.of_yojson) resp body

let actions_get_org_public_key ~org =
    let open Lwt in
    let uri = Request.build_uri "/orgs/{org}/actions/secrets/public-key" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "org" (fun x -> x) org in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Actions_public_key.of_yojson) resp body

let actions_get_org_secret ~org ~secret_name =
    let open Lwt in
    let uri = Request.build_uri "/orgs/{org}/actions/secrets/{secret_name}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "org" (fun x -> x) org in
    let uri = Request.replace_path_param uri "secret_name" (fun x -> x) secret_name in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Organization_actions_secret.of_yojson) resp body

let actions_get_repo_public_key ~owner ~repo =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/actions/secrets/public-key" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Actions_public_key.of_yojson) resp body

let actions_get_repo_secret ~owner ~repo ~secret_name =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/actions/secrets/{secret_name}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "secret_name" (fun x -> x) secret_name in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Actions_secret.of_yojson) resp body

let actions_get_self_hosted_runner_for_org ~org ~runner_id =
    let open Lwt in
    let uri = Request.build_uri "/orgs/{org}/actions/runners/{runner_id}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "org" (fun x -> x) org in
    let uri = Request.replace_path_param uri "runner_id" Int32.to_string runner_id in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Runner_no_labels.of_yojson) resp body

let actions_get_self_hosted_runner_for_repo ~owner ~repo ~runner_id =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/actions/runners/{runner_id}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "runner_id" Int32.to_string runner_id in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Runner_no_labels.of_yojson) resp body

let actions_get_self_hosted_runner_group_for_org ~org ~runner_group_id =
    let open Lwt in
    let uri = Request.build_uri "/orgs/{org}/actions/runner-groups/{runner_group_id}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "org" (fun x -> x) org in
    let uri = Request.replace_path_param uri "runner_group_id" Int32.to_string runner_group_id in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Runner_groups_org.of_yojson) resp body

let actions_get_workflow ~owner ~repo ~workflow_id =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/actions/workflows/{workflow_id}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "workflow_id" .show workflow_id in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Workflow.of_yojson) resp body

let actions_get_workflow_run ~owner ~repo ~run_id =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/actions/runs/{run_id}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "run_id" Int32.to_string run_id in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Workflow_run.of_yojson) resp body

let actions_list_artifacts_for_repo ~owner ~repo ?(per_page = 30l) ?(page = 1l) () =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/actions/artifacts" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.add_query_param uri "per_page" Int32.to_string per_page in
    let uri = Request.add_query_param uri "page" Int32.to_string page in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Inline_response_200_10.of_yojson) resp body

let actions_list_jobs_for_workflow_run ~owner ~repo ~run_id ?(filter = `Latest) ?(per_page = 30l) ?(page = 1l) () =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/actions/runs/{run_id}/jobs" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "run_id" Int32.to_string run_id in
    let uri = Request.add_query_param uri "filter" Enums.show_filter filter in
    let uri = Request.add_query_param uri "per_page" Int32.to_string per_page in
    let uri = Request.add_query_param uri "page" Int32.to_string page in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Inline_response_200_12.of_yojson) resp body

let actions_list_org_secrets ~org ?(per_page = 30l) ?(page = 1l) () =
    let open Lwt in
    let uri = Request.build_uri "/orgs/{org}/actions/secrets" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "org" (fun x -> x) org in
    let uri = Request.add_query_param uri "per_page" Int32.to_string per_page in
    let uri = Request.add_query_param uri "page" Int32.to_string page in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Inline_response_200_7.of_yojson) resp body

let actions_list_repo_access_to_self_hosted_runner_group_in_org ~org ~runner_group_id =
    let open Lwt in
    let uri = Request.build_uri "/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "org" (fun x -> x) org in
    let uri = Request.replace_path_param uri "runner_group_id" Int32.to_string runner_group_id in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Inline_response_200_6.of_yojson) resp body

let actions_list_repo_secrets ~owner ~repo ?(per_page = 30l) ?(page = 1l) () =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/actions/secrets" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.add_query_param uri "per_page" Int32.to_string per_page in
    let uri = Request.add_query_param uri "page" Int32.to_string page in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Inline_response_200_13.of_yojson) resp body

let actions_list_repo_workflows ~owner ~repo ?(per_page = 30l) ?(page = 1l) () =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/actions/workflows" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.add_query_param uri "per_page" Int32.to_string per_page in
    let uri = Request.add_query_param uri "page" Int32.to_string page in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Inline_response_200_14.of_yojson) resp body

let actions_list_runner_applications_for_org ~org =
    let open Lwt in
    let uri = Request.build_uri "/orgs/{org}/actions/runners/downloads" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "org" (fun x -> x) org in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as_list_of (JsonSupport.unwrap Runner_application.of_yojson) resp body

let actions_list_runner_applications_for_repo ~owner ~repo =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/actions/runners/downloads" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as_list_of (JsonSupport.unwrap Runner_application.of_yojson) resp body

let actions_list_selected_repos_for_org_secret ~org ~secret_name =
    let open Lwt in
    let uri = Request.build_uri "/orgs/{org}/actions/secrets/{secret_name}/repositories" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "org" (fun x -> x) org in
    let uri = Request.replace_path_param uri "secret_name" (fun x -> x) secret_name in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Inline_response_200_8.of_yojson) resp body

let actions_list_self_hosted_runner_groups_for_org ~org ?(per_page = 30l) ?(page = 1l) () =
    let open Lwt in
    let uri = Request.build_uri "/orgs/{org}/actions/runner-groups" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "org" (fun x -> x) org in
    let uri = Request.add_query_param uri "per_page" Int32.to_string per_page in
    let uri = Request.add_query_param uri "page" Int32.to_string page in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Inline_response_200_5.of_yojson) resp body

let actions_list_self_hosted_runners_for_org ~org ?(per_page = 30l) ?(page = 1l) () =
    let open Lwt in
    let uri = Request.build_uri "/orgs/{org}/actions/runners" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "org" (fun x -> x) org in
    let uri = Request.add_query_param uri "per_page" Int32.to_string per_page in
    let uri = Request.add_query_param uri "page" Int32.to_string page in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Inline_response_200_3.of_yojson) resp body

let actions_list_self_hosted_runners_for_repo ~owner ~repo ?(per_page = 30l) ?(page = 1l) () =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/actions/runners" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.add_query_param uri "per_page" Int32.to_string per_page in
    let uri = Request.add_query_param uri "page" Int32.to_string page in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Inline_response_200_3.of_yojson) resp body

let actions_list_self_hosted_runners_in_group_for_org ~org ~runner_group_id ?(per_page = 30l) ?(page = 1l) () =
    let open Lwt in
    let uri = Request.build_uri "/orgs/{org}/actions/runner-groups/{runner_group_id}/runners" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "org" (fun x -> x) org in
    let uri = Request.replace_path_param uri "runner_group_id" Int32.to_string runner_group_id in
    let uri = Request.add_query_param uri "per_page" Int32.to_string per_page in
    let uri = Request.add_query_param uri "page" Int32.to_string page in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Inline_response_200_3.of_yojson) resp body

let actions_list_workflow_run_artifacts ~owner ~repo ~run_id ?(per_page = 30l) ?(page = 1l) () =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/actions/runs/{run_id}/artifacts" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "run_id" Int32.to_string run_id in
    let uri = Request.add_query_param uri "per_page" Int32.to_string per_page in
    let uri = Request.add_query_param uri "page" Int32.to_string page in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Inline_response_200_10.of_yojson) resp body

let actions_list_workflow_runs ~owner ~repo ~workflow_id ?actor ?branch ?event ?status ?(per_page = 30l) ?(page = 1l) () =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "workflow_id" .show workflow_id in
    let uri = Request.maybe_add_query_param uri "actor" (fun x -> x) actor in
    let uri = Request.maybe_add_query_param uri "branch" (fun x -> x) branch in
    let uri = Request.maybe_add_query_param uri "event" (fun x -> x) event in
    let uri = Request.maybe_add_query_param uri "status" Enums.show_status_0 status in
    let uri = Request.add_query_param uri "per_page" Int32.to_string per_page in
    let uri = Request.add_query_param uri "page" Int32.to_string page in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Inline_response_200_11.of_yojson) resp body

let actions_list_workflow_runs_for_repo ~owner ~repo ?actor ?branch ?event ?status ?(per_page = 30l) ?(page = 1l) () =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/actions/runs" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.maybe_add_query_param uri "actor" (fun x -> x) actor in
    let uri = Request.maybe_add_query_param uri "branch" (fun x -> x) branch in
    let uri = Request.maybe_add_query_param uri "event" (fun x -> x) event in
    let uri = Request.maybe_add_query_param uri "status" Enums.show_status_0 status in
    let uri = Request.add_query_param uri "per_page" Int32.to_string per_page in
    let uri = Request.add_query_param uri "page" Int32.to_string page in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Inline_response_200_11.of_yojson) resp body

let actions_re_run_workflow ~owner ~repo ~run_id =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/actions/runs/{run_id}/rerun" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "run_id" Int32.to_string run_id in
    Cohttp_lwt_unix.Client.call `POST uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let actions_remove_repo_access_to_self_hosted_runner_group_in_org ~org ~runner_group_id ~repository_id =
    let open Lwt in
    let uri = Request.build_uri "/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories/{repository_id}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "org" (fun x -> x) org in
    let uri = Request.replace_path_param uri "runner_group_id" Int32.to_string runner_group_id in
    let uri = Request.replace_path_param uri "repository_id" Int32.to_string repository_id in
    Cohttp_lwt_unix.Client.call `DELETE uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let actions_remove_selected_repo_from_org_secret ~org ~secret_name ~repository_id =
    let open Lwt in
    let uri = Request.build_uri "/orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "org" (fun x -> x) org in
    let uri = Request.replace_path_param uri "secret_name" (fun x -> x) secret_name in
    let uri = Request.replace_path_param uri "repository_id" Int32.to_string repository_id in
    Cohttp_lwt_unix.Client.call `DELETE uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let actions_remove_self_hosted_runner_from_group_for_org ~org ~runner_group_id ~runner_id =
    let open Lwt in
    let uri = Request.build_uri "/orgs/{org}/actions/runner-groups/{runner_group_id}/runners/{runner_id}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "org" (fun x -> x) org in
    let uri = Request.replace_path_param uri "runner_group_id" Int32.to_string runner_group_id in
    let uri = Request.replace_path_param uri "runner_id" Int32.to_string runner_id in
    Cohttp_lwt_unix.Client.call `DELETE uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let actions_set_repo_access_to_self_hosted_runner_group_in_org ~org ~runner_group_id ~inline_object_36_t () =
    let open Lwt in
    let uri = Request.build_uri "/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "org" (fun x -> x) org in
    let uri = Request.replace_path_param uri "runner_group_id" Int32.to_string runner_group_id in
    let body = Request.write_as_json_body Inline_object_36.to_yojson inline_object_36_t in
    Cohttp_lwt_unix.Client.call `PUT uri ~headers ~body >>= fun (resp, body) ->
    Request.handle_unit_response resp

let actions_set_selected_repos_for_org_secret ~org ~secret_name ~inline_object_39_t () =
    let open Lwt in
    let uri = Request.build_uri "/orgs/{org}/actions/secrets/{secret_name}/repositories" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "org" (fun x -> x) org in
    let uri = Request.replace_path_param uri "secret_name" (fun x -> x) secret_name in
    let body = Request.write_as_json_body Inline_object_39.to_yojson inline_object_39_t in
    Cohttp_lwt_unix.Client.call `PUT uri ~headers ~body >>= fun (resp, body) ->
    Request.handle_unit_response resp

let actions_set_self_hosted_runners_in_group_for_org ~org ~runner_group_id ~inline_object_37_t () =
    let open Lwt in
    let uri = Request.build_uri "/orgs/{org}/actions/runner-groups/{runner_group_id}/runners" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "org" (fun x -> x) org in
    let uri = Request.replace_path_param uri "runner_group_id" Int32.to_string runner_group_id in
    let body = Request.write_as_json_body Inline_object_37.to_yojson inline_object_37_t in
    Cohttp_lwt_unix.Client.call `PUT uri ~headers ~body >>= fun (resp, body) ->
    Request.handle_unit_response resp

let actions_update_self_hosted_runner_group_for_org ~org ~runner_group_id ~inline_object_35_t () =
    let open Lwt in
    let uri = Request.build_uri "/orgs/{org}/actions/runner-groups/{runner_group_id}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "org" (fun x -> x) org in
    let uri = Request.replace_path_param uri "runner_group_id" Int32.to_string runner_group_id in
    let body = Request.write_as_json_body Inline_object_35.to_yojson inline_object_35_t in
    Cohttp_lwt_unix.Client.call `PATCH uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Runner_groups_org.of_yojson) resp body

