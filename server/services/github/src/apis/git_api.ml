(*
 * This file has been generated by the OCamlClientCodegen generator for openapi-generator.
 *
 * Generated by: https://openapi-generator.tech
 *
 *)

let git_create_blob ~owner ~repo ~inline_object_97_t () =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/git/blobs" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let body = Request.write_as_json_body Inline_object_97.to_yojson inline_object_97_t in
    Cohttp_lwt_unix.Client.call `POST uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Short_blob.of_yojson) resp body

let git_create_commit ~owner ~repo ~inline_object_98_t () =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/git/commits" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let body = Request.write_as_json_body Inline_object_98.to_yojson inline_object_98_t in
    Cohttp_lwt_unix.Client.call `POST uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Git_commit.of_yojson) resp body

let git_create_ref ~owner ~repo ~inline_object_99_t () =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/git/refs" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let body = Request.write_as_json_body Inline_object_99.to_yojson inline_object_99_t in
    Cohttp_lwt_unix.Client.call `POST uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Git_ref.of_yojson) resp body

let git_create_tag ~owner ~repo ~inline_object_101_t () =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/git/tags" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let body = Request.write_as_json_body Inline_object_101.to_yojson inline_object_101_t in
    Cohttp_lwt_unix.Client.call `POST uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Git_tag.of_yojson) resp body

let git_create_tree ~owner ~repo ~inline_object_102_t () =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/git/trees" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let body = Request.write_as_json_body Inline_object_102.to_yojson inline_object_102_t in
    Cohttp_lwt_unix.Client.call `POST uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Git_tree.of_yojson) resp body

let git_delete_ref ~owner ~repo ~ref =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/git/refs/{ref}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "ref" (fun x -> x) ref in
    Cohttp_lwt_unix.Client.call `DELETE uri ~headers >>= fun (resp, body) ->
    Request.handle_unit_response resp

let git_get_blob ~owner ~repo ~file_sha =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/git/blobs/{file_sha}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "file_sha" (fun x -> x) file_sha in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Blob.of_yojson) resp body

let git_get_commit ~owner ~repo ~commit_sha =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/git/commits/{commit_sha}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "commit_sha" (fun x -> x) commit_sha in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Git_commit.of_yojson) resp body

let git_get_ref ~owner ~repo ~ref =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/git/ref/{ref}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "ref" (fun x -> x) ref in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Git_ref.of_yojson) resp body

let git_get_tag ~owner ~repo ~tag_sha =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/git/tags/{tag_sha}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "tag_sha" (fun x -> x) tag_sha in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Git_tag.of_yojson) resp body

let git_get_tree ~owner ~repo ~tree_sha ?recursive () =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/git/trees/{tree_sha}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "tree_sha" (fun x -> x) tree_sha in
    let uri = Request.maybe_add_query_param uri "recursive" (fun x -> x) recursive in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Git_tree.of_yojson) resp body

let git_list_matching_refs ~owner ~repo ~ref ?(per_page = 30l) ?(page = 1l) () =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/git/matching-refs/{ref}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "ref" (fun x -> x) ref in
    let uri = Request.add_query_param uri "per_page" Int32.to_string per_page in
    let uri = Request.add_query_param uri "page" Int32.to_string page in
    Cohttp_lwt_unix.Client.call `GET uri ~headers >>= fun (resp, body) ->
    Request.read_json_body_as_list_of (JsonSupport.unwrap Git_ref.of_yojson) resp body

let git_update_ref ~owner ~repo ~ref ~inline_object_100_t () =
    let open Lwt in
    let uri = Request.build_uri "/repos/{owner}/{repo}/git/refs/{ref}" in
    let headers = Request.default_headers in
    let uri = Request.replace_path_param uri "owner" (fun x -> x) owner in
    let uri = Request.replace_path_param uri "repo" (fun x -> x) repo in
    let uri = Request.replace_path_param uri "ref" (fun x -> x) ref in
    let body = Request.write_as_json_body Inline_object_100.to_yojson inline_object_100_t in
    Cohttp_lwt_unix.Client.call `PATCH uri ~headers ~body >>= fun (resp, body) ->
    Request.read_json_body_as (JsonSupport.unwrap Git_ref.of_yojson) resp body

