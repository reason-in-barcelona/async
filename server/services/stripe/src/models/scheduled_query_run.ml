(*
 * This file has been generated by the OCamlClientCodegen generator for openapi-generator.
 *
 * Generated by: https://openapi-generator.tech
 *
 * Schema Scheduled_query_run.t : If you have [scheduled a Sigma query](https://stripe.com/docs/sigma/scheduled-queries), you'll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.
 *)

type t = {
    (* Time at which the object was created. Measured in seconds since the Unix epoch. *)
    created: int32;
    (* When the query was run, Sigma contained a snapshot of your Stripe data at this time. *)
    data_load_time: int32;
    error: Sigma_scheduled_query_run_error.t option [@default None];
    (* The file object representing the results of the query. *)
    file: Any_offile.t option [@default None];
    (* Unique identifier for the object. *)
    id: string;
    (* Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. *)
    livemode: bool;
    (* String representing the object's type. Objects of the same type share the same value. *)
    _object: Enums.scheduled_query_run_object[@default `Scheduled_query_run];
    (* Time at which the result expires and is no longer available for download. *)
    result_available_until: int32;
    (* SQL for the query. *)
    sql: string;
    (* The query's execution status, which will be `completed` for successful runs, and `canceled`, `failed`, or `timed_out` otherwise. *)
    status: string;
    (* Title of the query. *)
    title: string;
} [@@deriving yojson { strict = false }, show ];;

(** If you have [scheduled a Sigma query](https://stripe.com/docs/sigma/scheduled-queries), you'll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results. *)
let create (created : int32) (data_load_time : int32) (id : string) (livemode : bool) (_object : Enums.scheduled_query_run_object) (result_available_until : int32) (sql : string) (status : string) (title : string) : t = {
    created = created;
    data_load_time = data_load_time;
    error = None;
    file = None;
    id = id;
    livemode = livemode;
    _object = _object;
    result_available_until = result_available_until;
    sql = sql;
    status = status;
    title = title;
}

