(*
 * This file has been generated by the OCamlClientCodegen generator for openapi-generator.
 *
 * Generated by: https://openapi-generator.tech
 *
 * Schema Refund.t : `Refund` objects allow you to refund a charge that has previously been created but not yet refunded. Funds will be refunded to the credit or debit card that was originally charged.  Related guide: [Refunds](https://stripe.com/docs/refunds).
 *)

type t = {
    (* Amount, in %s. *)
    amount: int32;
    (* Balance transaction that describes the impact on your account balance. *)
    balance_transaction: Any_ofstringbalance_transaction.t option [@default None];
    (* ID of the charge that was refunded. *)
    charge: Any_ofstringcharge.t option [@default None];
    (* Time at which the object was created. Measured in seconds since the Unix epoch. *)
    created: int32;
    (* Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). *)
    currency: string;
    (* An arbitrary string attached to the object. Often useful for displaying to users. (Available on non-card refunds only) *)
    description: string option [@default None];
    (* If the refund failed, this balance transaction describes the adjustment made on your account balance that reverses the initial balance transaction. *)
    failure_balance_transaction: Any_ofstringbalance_transaction.t option [@default None];
    (* If the refund failed, the reason for refund failure if known. Possible values are `lost_or_stolen_card`, `expired_or_canceled_card`, or `unknown`. *)
    failure_reason: string option [@default None];
    (* Unique identifier for the object. *)
    id: string;
    (* Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. *)
    metadata: (string * string) list;
    (* String representing the object's type. Objects of the same type share the same value. *)
    _object: Enums.refund_object[@default `Refund];
    (* ID of the PaymentIntent that was refunded. *)
    payment_intent: Any_ofstringpayment_intent.t option [@default None];
    (* Reason for the refund, either user-provided (`duplicate`, `fraudulent`, or `requested_by_customer`) or generated by Stripe internally (`expired_uncaptured_charge`). *)
    reason: string option [@default None];
    (* This is the transaction number that appears on email receipts sent for this refund. *)
    receipt_number: string option [@default None];
    (* The transfer reversal that is associated with the refund. Only present if the charge came from another Stripe account. See the Connect documentation for details. *)
    source_transfer_reversal: Any_ofstringtransfer_reversal.t option [@default None];
    (* Status of the refund. For credit card refunds, this can be `pending`, `succeeded`, or `failed`. For other types of refunds, it can be `pending`, `succeeded`, `failed`, or `canceled`. Refer to our [refunds](https://stripe.com/docs/refunds#failed-refunds) documentation for more details. *)
    status: string option [@default None];
    (* If the accompanying transfer was reversed, the transfer reversal object. Only applicable if the charge was created using the destination parameter. *)
    transfer_reversal: Any_ofstringtransfer_reversal.t option [@default None];
} [@@deriving yojson { strict = false }, show ];;

(** `Refund` objects allow you to refund a charge that has previously been created but not yet refunded. Funds will be refunded to the credit or debit card that was originally charged.  Related guide: [Refunds](https://stripe.com/docs/refunds). *)
let create (amount : int32) (created : int32) (currency : string) (id : string) (_object : Enums.refund_object) : t = {
    amount = amount;
    balance_transaction = None;
    charge = None;
    created = created;
    currency = currency;
    description = None;
    failure_balance_transaction = None;
    failure_reason = None;
    id = id;
    metadata = [];
    _object = _object;
    payment_intent = None;
    reason = None;
    receipt_number = None;
    source_transfer_reversal = None;
    status = None;
    transfer_reversal = None;
}

