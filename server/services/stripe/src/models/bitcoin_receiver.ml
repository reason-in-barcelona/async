(*
 * This file has been generated by the OCamlClientCodegen generator for openapi-generator.
 *
 * Generated by: https://openapi-generator.tech
 *
 *)

type t = {
    (* True when this bitcoin receiver has received a non-zero amount of bitcoin. *)
    active: bool;
    (* The amount of `currency` that you are collecting as payment. *)
    amount: int32;
    (* The amount of `currency` to which `bitcoin_amount_received` has been converted. *)
    amount_received: int32;
    (* The amount of bitcoin that the customer should send to fill the receiver. The `bitcoin_amount` is denominated in Satoshi: there are 10^8 Satoshi in one bitcoin. *)
    bitcoin_amount: int32;
    (* The amount of bitcoin that has been sent by the customer to this receiver. *)
    bitcoin_amount_received: int32;
    (* This URI can be displayed to the customer as a clickable link (to activate their bitcoin client) or as a QR code (for mobile wallets). *)
    bitcoin_uri: string;
    (* Time at which the object was created. Measured in seconds since the Unix epoch. *)
    created: int32;
    (* Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) to which the bitcoin will be converted. *)
    currency: string;
    (* The customer ID of the bitcoin receiver. *)
    customer: string option [@default None];
    (* An arbitrary string attached to the object. Often useful for displaying to users. *)
    description: string option [@default None];
    (* The customer's email address, set by the API call that creates the receiver. *)
    email: string option [@default None];
    (* This flag is initially false and updates to true when the customer sends the `bitcoin_amount` to this receiver. *)
    filled: bool;
    (* Unique identifier for the object. *)
    id: string;
    (* A bitcoin address that is specific to this receiver. The customer can send bitcoin to this address to fill the receiver. *)
    inbound_address: string;
    (* Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. *)
    livemode: bool;
    (* Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. *)
    metadata: (string * string) list;
    (* String representing the object's type. Objects of the same type share the same value. *)
    _object: Enums.bitcoin_receiver_object[@default `Bitcoin_receiver];
    (* The ID of the payment created from the receiver, if any. Hidden when viewing the receiver with a publishable key. *)
    payment: string option [@default None];
    (* The refund address of this bitcoin receiver. *)
    refund_address: string option [@default None];
    transactions: Bitcoin_transaction_list_1.t option [@default None];
    (* This receiver contains uncaptured funds that can be used for a payment or refunded. *)
    uncaptured_funds: bool;
    (* Indicate if this source is used for payment. *)
    used_for_payment: bool option [@default None];
} [@@deriving yojson { strict = false }, show ];;

let create (active : bool) (amount : int32) (amount_received : int32) (bitcoin_amount : int32) (bitcoin_amount_received : int32) (bitcoin_uri : string) (created : int32) (currency : string) (filled : bool) (id : string) (inbound_address : string) (livemode : bool) (_object : Enums.bitcoin_receiver_object) (uncaptured_funds : bool) : t = {
    active = active;
    amount = amount;
    amount_received = amount_received;
    bitcoin_amount = bitcoin_amount;
    bitcoin_amount_received = bitcoin_amount_received;
    bitcoin_uri = bitcoin_uri;
    created = created;
    currency = currency;
    customer = None;
    description = None;
    email = None;
    filled = filled;
    id = id;
    inbound_address = inbound_address;
    livemode = livemode;
    metadata = [];
    _object = _object;
    payment = None;
    refund_address = None;
    transactions = None;
    uncaptured_funds = uncaptured_funds;
    used_for_payment = None;
}

