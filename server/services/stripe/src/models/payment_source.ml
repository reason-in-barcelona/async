(*
 * This file has been generated by the OCamlClientCodegen generator for openapi-generator.
 *
 * Generated by: https://openapi-generator.tech
 *
 *)

type t = {
    (* Business information about the account. *)
    business_profile: Any_ofaccount_business_profile.t option [@default None];
    (* The business type. *)
    business_type: Enums.business_type option [@default None];
    capabilities: Account_capabilities.t option [@default None];
    (* Whether the account can create live charges. *)
    charges_enabled: bool option [@default None];
    company: Legal_entity_company.t option [@default None];
    (* Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected. *)
    country: string option;
    (* Time at which the object was created. Measured in seconds since the Unix epoch. *)
    created: int32;
    (* Three-letter ISO currency code representing the default currency for the account. This must be a currency that [Stripe supports in the account's country](https://stripe.com/docs/payouts). *)
    default_currency: string option [@default None];
    (* Whether account details have been submitted. Standard accounts cannot receive payouts before this is true. *)
    details_submitted: bool option [@default None];
    (* The customer's email address, set by the API call that creates the receiver. *)
    email: string option [@default None];
    external_accounts: External_account_list_1.t option [@default None];
    (* Unique identifier for the object. *)
    id: string;
    individual: Person.t option [@default None];
    (* Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. *)
    metadata: (string * string) list;
    (* String representing the object's type. Objects of the same type share the same value. *)
    _object: Enums.source_object[@default `Source];
    (* Whether Stripe can send payouts to this account. *)
    payouts_enabled: bool option [@default None];
    requirements: Account_requirements.t option [@default None];
    (* Options for customizing how the account functions within Stripe. *)
    settings: Any_ofaccount_settings.t option [@default None];
    tos_acceptance: Account_tos_acceptance.t option [@default None];
    (* The `type` of the source. The `type` is a payment method, one of `ach_credit_transfer`, `ach_debit`, `alipay`, `bancontact`, `card`, `card_present`, `eps`, `giropay`, `ideal`, `multibanco`, `klarna`, `p24`, `sepa_debit`, `sofort`, `three_d_secure`, or `wechat`. An additional hash is included on the source with a name matching this value. It contains additional information specific to the [payment method](https://stripe.com/docs/sources) used. *)
    _type: Enums.type_2;
    (* The ID of the customer to which this source is attached. This will not be present when the source has not been attached to a customer. *)
    customer: string option [@default None];
    (* Uniquely identifies this particular card number. You can use this attribute to check whether two customers who’ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number. *)
    fingerprint: string option;
    (* Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. *)
    livemode: bool;
    (* If the Alipay account object is not reusable, the exact amount that you can create a charge for. *)
    payment_amount: int32 option [@default None];
    (* If the Alipay account object is not reusable, the exact currency that you can create a charge for. *)
    payment_currency: string option [@default None];
    (* True if you can create multiple payments using this account. If the account is reusable, then you can freely choose the amount of each payment. *)
    reusable: bool;
    (* Whether this Alipay account object has ever been used for a payment. *)
    used: bool;
    (* The username for the Alipay account. *)
    username: string;
    (* The account this card belongs to. This attribute will not be in the card object if the card belongs to a customer or recipient instead. *)
    account: Any_ofstringaccount.t option [@default None];
    (* The name of the person or business that owns the bank account. *)
    account_holder_name: string option [@default None];
    (* The type of entity that holds the account. This can be either `individual` or `company`. *)
    account_holder_type: string option [@default None];
    (* A set of available payout methods for this card. Only values from this set should be passed as the `method` when creating a payout. *)
    available_payout_methods: Enums.available_payout_methods list;
    (* Name of the bank associated with the routing number (e.g., `WELLS FARGO`). *)
    bank_name: string option [@default None];
    (* Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) associated with the source. This is the currency for which the source will be chargeable once ready. Required for `single_use` sources. *)
    currency: string option;
    (* Whether this card is the default external account for its currency. *)
    default_for_currency: bool option [@default None];
    (* The last four digits of the card. *)
    last4: string;
    (* The routing transit number for the bank account. *)
    routing_number: string option [@default None];
    (* The status of the source, one of `canceled`, `chargeable`, `consumed`, `failed`, or `pending`. Only `chargeable` sources can be used to create a charge. *)
    status: string;
    (* True when this bitcoin receiver has received a non-zero amount of bitcoin. *)
    active: bool;
    (* A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the total amount associated with the source. This is the amount for which the source will be chargeable once ready. Required for `single_use` sources. *)
    amount: int32 option;
    (* The amount of `currency` to which `bitcoin_amount_received` has been converted. *)
    amount_received: int32;
    (* The amount of bitcoin that the customer should send to fill the receiver. The `bitcoin_amount` is denominated in Satoshi: there are 10^8 Satoshi in one bitcoin. *)
    bitcoin_amount: int32;
    (* The amount of bitcoin that has been sent by the customer to this receiver. *)
    bitcoin_amount_received: int32;
    (* This URI can be displayed to the customer as a clickable link (to activate their bitcoin client) or as a QR code (for mobile wallets). *)
    bitcoin_uri: string;
    (* An arbitrary string attached to the object. Often useful for displaying to users. *)
    description: string option [@default None];
    (* This flag is initially false and updates to true when the customer sends the `bitcoin_amount` to this receiver. *)
    filled: bool;
    (* A bitcoin address that is specific to this receiver. The customer can send bitcoin to this address to fill the receiver. *)
    inbound_address: string;
    (* The ID of the payment created from the receiver, if any. Hidden when viewing the receiver with a publishable key. *)
    payment: string option [@default None];
    (* The refund address of this bitcoin receiver. *)
    refund_address: string option [@default None];
    transactions: Bitcoin_transaction_list_1.t option [@default None];
    (* This receiver contains uncaptured funds that can be used for a payment or refunded. *)
    uncaptured_funds: bool;
    (* Indicate if this source is used for payment. *)
    used_for_payment: bool option [@default None];
    (* City/District/Suburb/Town/Village. *)
    address_city: string option [@default None];
    (* Billing address country, if provided when creating card. *)
    address_country: string option [@default None];
    (* Address line 1 (Street address/PO Box/Company name). *)
    address_line1: string option [@default None];
    (* If `address_line1` was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`. *)
    address_line1_check: string option [@default None];
    (* Address line 2 (Apartment/Suite/Unit/Building). *)
    address_line2: string option [@default None];
    (* State/County/Province/Region. *)
    address_state: string option [@default None];
    (* ZIP or postal code. *)
    address_zip: string option [@default None];
    (* If `address_zip` was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`. *)
    address_zip_check: string option [@default None];
    (* Card brand. Can be `American Express`, `Diners Club`, `Discover`, `JCB`, `MasterCard`, `UnionPay`, `Visa`, or `Unknown`. *)
    brand: string;
    (* If a CVC was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`. A result of unchecked indicates that CVC was provided but hasn't been checked yet. Checks are typically performed when attaching a card to a Customer object, or when creating a charge. For more details, see [Check if a card is valid without a charge](https://support.stripe.com/questions/check-if-a-card-is-valid-without-a-charge). *)
    cvc_check: string option [@default None];
    (* (For tokenized numbers only.) The last four digits of the device account number. *)
    dynamic_last4: string option [@default None];
    (* Two-digit number representing the card's expiration month. *)
    exp_month: int32;
    (* Four-digit number representing the card's expiration year. *)
    exp_year: int32;
    (* Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`. *)
    funding: string;
    (* Cardholder name. *)
    name: string option [@default None];
    (* The recipient that this card belongs to. This attribute will not be in the card object if the card belongs to a customer or account instead. *)
    recipient: Any_ofstringrecipient.t option [@default None];
    (* If the card number is tokenized, this is the method that was used. Can be `android_pay` (includes Google Pay), `apple_pay`, `masterpass`, `visa_checkout`, or null. *)
    tokenization_method: string option [@default None];
    ach_credit_transfer: Source_type_ach_credit_transfer.t option [@default None];
    ach_debit: Source_type_ach_debit.t option [@default None];
    alipay: Source_type_alipay.t option [@default None];
    au_becs_debit: Source_type_au_becs_debit.t option [@default None];
    bancontact: Source_type_bancontact.t option [@default None];
    card: Source_type_card.t option [@default None];
    card_present: Source_type_card_present.t option [@default None];
    (* The client secret of the source. Used for client-side retrieval using a publishable key. *)
    client_secret: string;
    code_verification: Source_code_verification_flow.t option [@default None];
    eps: Source_type_eps.t option [@default None];
    (* The authentication `flow` of the source. `flow` is one of `redirect`, `receiver`, `code_verification`, `none`. *)
    flow: string;
    giropay: Source_type_giropay.t option [@default None];
    ideal: Source_type_ideal.t option [@default None];
    klarna: Source_type_klarna.t option [@default None];
    multibanco: Source_type_multibanco.t option [@default None];
    (* Information about the owner of the payment instrument that may be used or required by particular source types. *)
    owner: Any_ofsource_owner.t option [@default None];
    p24: Source_type_p24.t option [@default None];
    receiver: Source_receiver_flow.t option [@default None];
    redirect: Source_redirect_flow.t option [@default None];
    sepa_debit: Source_type_sepa_debit.t option [@default None];
    sofort: Source_type_sofort.t option [@default None];
    source_order: Source_order.t option [@default None];
    (* Extra information about a source. This will appear on your customer's statement every time you charge the source. *)
    statement_descriptor: string option [@default None];
    three_d_secure: Source_type_three_d_secure.t option [@default None];
    (* Either `reusable` or `single_use`. Whether this source should be reusable or not. Some source types may or may not be reusable by construction, while others may leave the option at creation. If an incompatible value is passed, an error will be returned. *)
    usage: string option [@default None];
    wechat: Source_type_wechat.t option [@default None];
} [@@deriving yojson { strict = false }, show ];;

let create (country : string option) (created : int32) (id : string) (_object : Enums.source_object) (_type : Enums.type_2) (fingerprint : string option) (livemode : bool) (reusable : bool) (used : bool) (username : string) (currency : string option) (last4 : string) (status : string) (active : bool) (amount : int32 option) (amount_received : int32) (bitcoin_amount : int32) (bitcoin_amount_received : int32) (bitcoin_uri : string) (filled : bool) (inbound_address : string) (uncaptured_funds : bool) (brand : string) (exp_month : int32) (exp_year : int32) (funding : string) (client_secret : string) (flow : string) : t = {
    business_profile = None;
    business_type = None;
    capabilities = None;
    charges_enabled = None;
    company = None;
    country = country;
    created = created;
    default_currency = None;
    details_submitted = None;
    email = None;
    external_accounts = None;
    id = id;
    individual = None;
    metadata = [];
    _object = _object;
    payouts_enabled = None;
    requirements = None;
    settings = None;
    tos_acceptance = None;
    _type = _type;
    customer = None;
    fingerprint = fingerprint;
    livemode = livemode;
    payment_amount = None;
    payment_currency = None;
    reusable = reusable;
    used = used;
    username = username;
    account = None;
    account_holder_name = None;
    account_holder_type = None;
    available_payout_methods = [];
    bank_name = None;
    currency = currency;
    default_for_currency = None;
    last4 = last4;
    routing_number = None;
    status = status;
    active = active;
    amount = amount;
    amount_received = amount_received;
    bitcoin_amount = bitcoin_amount;
    bitcoin_amount_received = bitcoin_amount_received;
    bitcoin_uri = bitcoin_uri;
    description = None;
    filled = filled;
    inbound_address = inbound_address;
    payment = None;
    refund_address = None;
    transactions = None;
    uncaptured_funds = uncaptured_funds;
    used_for_payment = None;
    address_city = None;
    address_country = None;
    address_line1 = None;
    address_line1_check = None;
    address_line2 = None;
    address_state = None;
    address_zip = None;
    address_zip_check = None;
    brand = brand;
    cvc_check = None;
    dynamic_last4 = None;
    exp_month = exp_month;
    exp_year = exp_year;
    funding = funding;
    name = None;
    recipient = None;
    tokenization_method = None;
    ach_credit_transfer = None;
    ach_debit = None;
    alipay = None;
    au_becs_debit = None;
    bancontact = None;
    card = None;
    card_present = None;
    client_secret = client_secret;
    code_verification = None;
    eps = None;
    flow = flow;
    giropay = None;
    ideal = None;
    klarna = None;
    multibanco = None;
    owner = None;
    p24 = None;
    receiver = None;
    redirect = None;
    sepa_debit = None;
    sofort = None;
    source_order = None;
    statement_descriptor = None;
    three_d_secure = None;
    usage = None;
    wechat = None;
}

