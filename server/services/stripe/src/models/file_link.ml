(*
 * This file has been generated by the OCamlClientCodegen generator for openapi-generator.
 *
 * Generated by: https://openapi-generator.tech
 *
 * Schema File_link.t : To share the contents of a `File` object with non-Stripe users, you can create a `FileLink`. `FileLink`s contain a URL that can be used to retrieve the contents of the file without authentication.
 *)

type t = {
    (* Time at which the object was created. Measured in seconds since the Unix epoch. *)
    created: int32;
    (* Whether this link is already expired. *)
    expired: bool;
    (* Time at which the link expires. *)
    expires_at: int32 option [@default None];
    (* The file object this link points to. *)
    file: Any_ofstringfile.t;
    (* Unique identifier for the object. *)
    id: string;
    (* Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. *)
    livemode: bool;
    (* Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. *)
    metadata: (string * string) list;
    (* String representing the object's type. Objects of the same type share the same value. *)
    _object: Enums.file_link_object[@default `File_link];
    (* The publicly accessible URL to download the file. *)
    url: string option [@default None];
} [@@deriving yojson { strict = false }, show ];;

(** To share the contents of a `File` object with non-Stripe users, you can create a `FileLink`. `FileLink`s contain a URL that can be used to retrieve the contents of the file without authentication. *)
let create (created : int32) (expired : bool) (file : Any_ofstringfile.t) (id : string) (livemode : bool) (metadata : (string * string) list) (_object : Enums.file_link_object) : t = {
    created = created;
    expired = expired;
    expires_at = None;
    file = file;
    id = id;
    livemode = livemode;
    metadata = metadata;
    _object = _object;
    url = None;
}

