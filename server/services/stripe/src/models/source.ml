(*
 * This file has been generated by the OCamlClientCodegen generator for openapi-generator.
 *
 * Generated by: https://openapi-generator.tech
 *
 * Schema Source.t : `Source` objects allow you to accept a variety of payment methods. They represent a customer's payment instrument, and can be used with the Stripe API just like a `Card` object: once chargeable, they can be charged, or can be attached to customers.  Related guides: [Sources API](https://stripe.com/docs/sources) and [Sources & Customers](https://stripe.com/docs/sources/customers).
 *)

type t = {
    ach_credit_transfer: Source_type_ach_credit_transfer.t option [@default None];
    ach_debit: Source_type_ach_debit.t option [@default None];
    alipay: Source_type_alipay.t option [@default None];
    (* A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for Â¥1, Japanese Yen being a zero-decimal currency) representing the total amount associated with the source. This is the amount for which the source will be chargeable once ready. Required for `single_use` sources. *)
    amount: int32 option [@default None];
    au_becs_debit: Source_type_au_becs_debit.t option [@default None];
    bancontact: Source_type_bancontact.t option [@default None];
    card: Source_type_card.t option [@default None];
    card_present: Source_type_card_present.t option [@default None];
    (* The client secret of the source. Used for client-side retrieval using a publishable key. *)
    client_secret: string;
    code_verification: Source_code_verification_flow.t option [@default None];
    (* Time at which the object was created. Measured in seconds since the Unix epoch. *)
    created: int32;
    (* Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) associated with the source. This is the currency for which the source will be chargeable once ready. Required for `single_use` sources. *)
    currency: string option [@default None];
    (* The ID of the customer to which this source is attached. This will not be present when the source has not been attached to a customer. *)
    customer: string option [@default None];
    eps: Source_type_eps.t option [@default None];
    (* The authentication `flow` of the source. `flow` is one of `redirect`, `receiver`, `code_verification`, `none`. *)
    flow: string;
    giropay: Source_type_giropay.t option [@default None];
    (* Unique identifier for the object. *)
    id: string;
    ideal: Source_type_ideal.t option [@default None];
    klarna: Source_type_klarna.t option [@default None];
    (* Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. *)
    livemode: bool;
    (* Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. *)
    metadata: (string * string) list;
    multibanco: Source_type_multibanco.t option [@default None];
    (* String representing the object's type. Objects of the same type share the same value. *)
    _object: Enums.source_object[@default `Source];
    (* Information about the owner of the payment instrument that may be used or required by particular source types. *)
    owner: Any_ofsource_owner.t option [@default None];
    p24: Source_type_p24.t option [@default None];
    receiver: Source_receiver_flow.t option [@default None];
    redirect: Source_redirect_flow.t option [@default None];
    sepa_debit: Source_type_sepa_debit.t option [@default None];
    sofort: Source_type_sofort.t option [@default None];
    source_order: Source_order.t option [@default None];
    (* Extra information about a source. This will appear on your customer's statement every time you charge the source. *)
    statement_descriptor: string option [@default None];
    (* The status of the source, one of `canceled`, `chargeable`, `consumed`, `failed`, or `pending`. Only `chargeable` sources can be used to create a charge. *)
    status: string;
    three_d_secure: Source_type_three_d_secure.t option [@default None];
    (* The `type` of the source. The `type` is a payment method, one of `ach_credit_transfer`, `ach_debit`, `alipay`, `bancontact`, `card`, `card_present`, `eps`, `giropay`, `ideal`, `multibanco`, `klarna`, `p24`, `sepa_debit`, `sofort`, `three_d_secure`, or `wechat`. An additional hash is included on the source with a name matching this value. It contains additional information specific to the [payment method](https://stripe.com/docs/sources) used. *)
    _type: Enums.type_2;
    (* Either `reusable` or `single_use`. Whether this source should be reusable or not. Some source types may or may not be reusable by construction, while others may leave the option at creation. If an incompatible value is passed, an error will be returned. *)
    usage: string option [@default None];
    wechat: Source_type_wechat.t option [@default None];
} [@@deriving yojson { strict = false }, show ];;

(** `Source` objects allow you to accept a variety of payment methods. They represent a customer's payment instrument, and can be used with the Stripe API just like a `Card` object: once chargeable, they can be charged, or can be attached to customers.  Related guides: [Sources API](https://stripe.com/docs/sources) and [Sources & Customers](https://stripe.com/docs/sources/customers). *)
let create (client_secret : string) (created : int32) (flow : string) (id : string) (livemode : bool) (_object : Enums.source_object) (status : string) (_type : Enums.type_2) : t = {
    ach_credit_transfer = None;
    ach_debit = None;
    alipay = None;
    amount = None;
    au_becs_debit = None;
    bancontact = None;
    card = None;
    card_present = None;
    client_secret = client_secret;
    code_verification = None;
    created = created;
    currency = None;
    customer = None;
    eps = None;
    flow = flow;
    giropay = None;
    id = id;
    ideal = None;
    klarna = None;
    livemode = livemode;
    metadata = [];
    multibanco = None;
    _object = _object;
    owner = None;
    p24 = None;
    receiver = None;
    redirect = None;
    sepa_debit = None;
    sofort = None;
    source_order = None;
    statement_descriptor = None;
    status = status;
    three_d_secure = None;
    _type = _type;
    usage = None;
    wechat = None;
}

