(*
 * This file has been generated by the OCamlClientCodegen generator for openapi-generator.
 *
 * Generated by: https://openapi-generator.tech
 *
 * Schema Subscription_schedule.t : A subscription schedule allows you to create and manage the lifecycle of a subscription by predefining expected changes.  Related guide: [Subscription Schedules](https://stripe.com/docs/billing/subscriptions/subscription-schedules).
 *)

type t = {
    (* Time at which the subscription schedule was canceled. Measured in seconds since the Unix epoch. *)
    canceled_at: int32 option [@default None];
    (* Time at which the subscription schedule was completed. Measured in seconds since the Unix epoch. *)
    completed_at: int32 option [@default None];
    (* Time at which the object was created. Measured in seconds since the Unix epoch. *)
    created: int32;
    (* Object representing the start and end dates for the current phase of the subscription schedule, if it is `active`. *)
    current_phase: Any_ofsubscription_schedule_current_phase.t option [@default None];
    (* ID of the customer who owns the subscription schedule. *)
    customer: Any_ofstringcustomerdeleted_customer.t;
    default_settings: Subscription_schedules_resource_default_settings.t;
    (* Behavior of the subscription schedule and underlying subscription when it ends. Possible values are `release` and `cancel`. *)
    end_behavior: Enums.end_behavior;
    (* Unique identifier for the object. *)
    id: string;
    (* Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. *)
    livemode: bool;
    (* Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. *)
    metadata: (string * string) list;
    (* String representing the object's type. Objects of the same type share the same value. *)
    _object: Enums.subscription_schedule_object[@default `Subscription_schedule];
    (* Configuration for the subscription schedule's phases. *)
    phases: Subscription_schedule_phase_configuration.t list;
    (* Time at which the subscription schedule was released. Measured in seconds since the Unix epoch. *)
    released_at: int32 option [@default None];
    (* ID of the subscription once managed by the subscription schedule (if it is released). *)
    released_subscription: string option [@default None];
    (* The present status of the subscription schedule. Possible values are `not_started`, `active`, `completed`, `released`, and `canceled`. You can read more about the different states in our [behavior guide](https://stripe.com/docs/billing/subscriptions/subscription-schedules). *)
    status: Enums.subscription_schedule_status;
    (* ID of the subscription managed by the subscription schedule. *)
    subscription: Any_ofstringsubscription.t option [@default None];
} [@@deriving yojson { strict = false }, show ];;

(** A subscription schedule allows you to create and manage the lifecycle of a subscription by predefining expected changes.  Related guide: [Subscription Schedules](https://stripe.com/docs/billing/subscriptions/subscription-schedules). *)
let create (created : int32) (customer : Any_ofstringcustomerdeleted_customer.t) (default_settings : Subscription_schedules_resource_default_settings.t) (end_behavior : Enums.end_behavior) (id : string) (livemode : bool) (_object : Enums.subscription_schedule_object) (phases : Subscription_schedule_phase_configuration.t list) (status : Enums.subscription_schedule_status) : t = {
    canceled_at = None;
    completed_at = None;
    created = created;
    current_phase = None;
    customer = customer;
    default_settings = default_settings;
    end_behavior = end_behavior;
    id = id;
    livemode = livemode;
    metadata = [];
    _object = _object;
    phases = phases;
    released_at = None;
    released_subscription = None;
    status = status;
    subscription = None;
}

