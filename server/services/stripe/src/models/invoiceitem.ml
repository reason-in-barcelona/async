(*
 * This file has been generated by the OCamlClientCodegen generator for openapi-generator.
 *
 * Generated by: https://openapi-generator.tech
 *
 * Schema Invoiceitem.t : Sometimes you want to add a charge or credit to a customer, but actually charge or credit the customer's card only at the end of a regular billing cycle. This is useful for combining several charges (to minimize per-transaction fees), or for having Stripe tabulate your usage-based billing totals.  Related guide: [Subscription Invoices](https://stripe.com/docs/billing/invoices/subscription#adding-upcoming-invoice-items).
 *)

type t = {
    (* Amount (in the `currency` specified) of the invoice item. This should always be equal to `unit_amount * quantity`. *)
    amount: int32;
    (* Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). *)
    currency: string;
    (* The ID of the customer who will be billed when this invoice item is billed. *)
    customer: Any_ofstringcustomerdeleted_customer.t;
    (* Time at which the object was created. Measured in seconds since the Unix epoch. *)
    date: int32;
    (* An arbitrary string attached to the object. Often useful for displaying to users. *)
    description: string option [@default None];
    (* If true, discounts will apply to this invoice item. Always false for prorations. *)
    discountable: bool;
    (* The discounts which apply to the invoice item. Item discounts are applied before invoice discounts. Use `expand[]=discounts` to expand each discount. *)
    discounts: Any_ofstringdiscount.t list;
    (* Unique identifier for the object. *)
    id: string;
    (* The ID of the invoice this invoice item belongs to. *)
    invoice: Any_ofstringinvoice.t option [@default None];
    (* Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. *)
    livemode: bool;
    (* Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. *)
    metadata: (string * string) list;
    (* String representing the object's type. Objects of the same type share the same value. *)
    _object: Enums.deleted_invoiceitem_object[@default `Invoiceitem];
    period: Invoice_line_item_period.t;
    (* The price of the invoice item. *)
    price: Any_ofprice.t option [@default None];
    (* Whether the invoice item was created automatically as a proration adjustment when the customer switched plans. *)
    proration: bool;
    (* Quantity of units for the invoice item. If the invoice item is a proration, the quantity of the subscription that the proration was computed for. *)
    quantity: int32;
    (* The subscription that this invoice item has been created for, if any. *)
    subscription: Any_ofstringsubscription.t option [@default None];
    (* The subscription item that this invoice item has been created for, if any. *)
    subscription_item: string option [@default None];
    (* The tax rates which apply to the invoice item. When set, the `default_tax_rates` on the invoice do not apply to this invoice item. *)
    tax_rates: Tax_rate.t list;
    (* Unit amount (in the `currency` specified) of the invoice item. *)
    unit_amount: int32 option [@default None];
    (* Same as `unit_amount`, but contains a decimal value with at most 12 decimal places. *)
    unit_amount_decimal: string option [@default None];
} [@@deriving yojson { strict = false }, show ];;

(** Sometimes you want to add a charge or credit to a customer, but actually charge or credit the customer's card only at the end of a regular billing cycle. This is useful for combining several charges (to minimize per-transaction fees), or for having Stripe tabulate your usage-based billing totals.  Related guide: [Subscription Invoices](https://stripe.com/docs/billing/invoices/subscription#adding-upcoming-invoice-items). *)
let create (amount : int32) (currency : string) (customer : Any_ofstringcustomerdeleted_customer.t) (date : int32) (discountable : bool) (id : string) (livemode : bool) (_object : Enums.deleted_invoiceitem_object) (period : Invoice_line_item_period.t) (proration : bool) (quantity : int32) : t = {
    amount = amount;
    currency = currency;
    customer = customer;
    date = date;
    description = None;
    discountable = discountable;
    discounts = [];
    id = id;
    invoice = None;
    livemode = livemode;
    metadata = [];
    _object = _object;
    period = period;
    price = None;
    proration = proration;
    quantity = quantity;
    subscription = None;
    subscription_item = None;
    tax_rates = [];
    unit_amount = None;
    unit_amount_decimal = None;
}

