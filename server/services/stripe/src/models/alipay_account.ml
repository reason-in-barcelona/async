(*
 * This file has been generated by the OCamlClientCodegen generator for openapi-generator.
 *
 * Generated by: https://openapi-generator.tech
 *
 *)

type t = {
    (* Time at which the object was created. Measured in seconds since the Unix epoch. *)
    created: int32;
    (* The ID of the customer associated with this Alipay Account. *)
    customer: Any_ofstringcustomerdeleted_customer.t option [@default None];
    (* Uniquely identifies the account and will be the same across all Alipay account objects that are linked to the same Alipay account. *)
    fingerprint: string;
    (* Unique identifier for the object. *)
    id: string;
    (* Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. *)
    livemode: bool;
    (* Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. *)
    metadata: (string * string) list;
    (* String representing the object's type. Objects of the same type share the same value. *)
    _object: Enums.alipay_account_object[@default `Alipay_account];
    (* If the Alipay account object is not reusable, the exact amount that you can create a charge for. *)
    payment_amount: int32 option [@default None];
    (* If the Alipay account object is not reusable, the exact currency that you can create a charge for. *)
    payment_currency: string option [@default None];
    (* True if you can create multiple payments using this account. If the account is reusable, then you can freely choose the amount of each payment. *)
    reusable: bool;
    (* Whether this Alipay account object has ever been used for a payment. *)
    used: bool;
    (* The username for the Alipay account. *)
    username: string;
} [@@deriving yojson { strict = false }, show ];;

let create (created : int32) (fingerprint : string) (id : string) (livemode : bool) (_object : Enums.alipay_account_object) (reusable : bool) (used : bool) (username : string) : t = {
    created = created;
    customer = None;
    fingerprint = fingerprint;
    id = id;
    livemode = livemode;
    metadata = [];
    _object = _object;
    payment_amount = None;
    payment_currency = None;
    reusable = reusable;
    used = used;
    username = username;
}

