(*
 * This file has been generated by the OCamlClientCodegen generator for openapi-generator.
 *
 * Generated by: https://openapi-generator.tech
 *
 *)

type t = {
    (* The amount, in %s. *)
    amount: int32;
    (* Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). *)
    currency: string;
    (* An arbitrary string attached to the object. Often useful for displaying to users. *)
    description: string option [@default None];
    (* The amount of discount calculated per discount for this line item. *)
    discount_amounts: Discounts_resource_discount_amount.t list;
    (* If true, discounts will apply to this line item. Always false for prorations. *)
    discountable: bool;
    (* The discounts applied to the invoice line item. Line item discounts are applied before invoice discounts. Use `expand[]=discounts` to expand each discount. *)
    discounts: Any_ofstringdiscount.t list;
    (* Unique identifier for the object. *)
    id: string;
    (* The ID of the [invoice item](https://stripe.com/docs/api/invoiceitems) associated with this line item if any. *)
    invoice_item: string option [@default None];
    (* Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. *)
    livemode: bool;
    (* Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Note that for line items with `type=subscription` this will reflect the metadata of the subscription that caused the line item to be created. *)
    metadata: (string * string) list;
    (* String representing the object's type. Objects of the same type share the same value. *)
    _object: Enums.line_item_object[@default `Line_item];
    period: Invoice_line_item_period.t;
    (* The price of the line item. *)
    price: Any_ofprice.t option [@default None];
    (* Whether this is a proration. *)
    proration: bool;
    (* The quantity of the subscription, if the line item is a subscription or a proration. *)
    quantity: int32 option [@default None];
    (* The subscription that the invoice item pertains to, if any. *)
    subscription: string option [@default None];
    (* The subscription item that generated this invoice item. Left empty if the line item is not an explicit result of a subscription. *)
    subscription_item: string option [@default None];
    (* The amount of tax calculated per tax rate for this line item *)
    tax_amounts: Invoice_tax_amount.t list;
    (* The tax rates which apply to the line item. *)
    tax_rates: Tax_rate.t list;
    (* A string identifying the type of the source of this line item, either an `invoiceitem` or a `subscription`. *)
    _type: Enums.line_item_type;
} [@@deriving yojson { strict = false }, show ];;

let create (amount : int32) (currency : string) (discountable : bool) (id : string) (livemode : bool) (metadata : (string * string) list) (_object : Enums.line_item_object) (period : Invoice_line_item_period.t) (proration : bool) (_type : Enums.line_item_type) : t = {
    amount = amount;
    currency = currency;
    description = None;
    discount_amounts = [];
    discountable = discountable;
    discounts = [];
    id = id;
    invoice_item = None;
    livemode = livemode;
    metadata = metadata;
    _object = _object;
    period = period;
    price = None;
    proration = proration;
    quantity = None;
    subscription = None;
    subscription_item = None;
    tax_amounts = [];
    tax_rates = [];
    _type = _type;
}

