(*
 * This file has been generated by the OCamlClientCodegen generator for openapi-generator.
 *
 * Generated by: https://openapi-generator.tech
 *
 * Schema Price.t : Prices define the unit cost, currency, and (optional) billing cycle for both recurring and one-time purchases of products. [Products](https://stripe.com/docs/api#products) help you track inventory or provisioning, and prices help you track payment terms. Different physical goods or levels of service should be represented by products, and pricing options should be represented by prices. This approach lets you change prices without having to change your provisioning scheme.  For example, you might have a single \''gold\'' product that has prices for $10/month, $100/year, and €9 once.  Related guides: [Set up a subscription](https://stripe.com/docs/billing/subscriptions/set-up-subscription), [create an invoice](https://stripe.com/docs/billing/invoices/create), and more about [products and prices](https://stripe.com/docs/billing/prices-guide).
 *)

type t = {
    (* Whether the price can be used for new purchases. *)
    active: bool;
    (* Describes how to compute the price per period. Either `per_unit` or `tiered`. `per_unit` indicates that the fixed amount (specified in `unit_amount` or `unit_amount_decimal`) will be charged per unit in `quantity` (for prices with `usage_type=licensed`), or per unit of total usage (for prices with `usage_type=metered`). `tiered` indicates that the unit pricing will be computed using a tiering strategy as defined using the `tiers` and `tiers_mode` attributes. *)
    billing_scheme: Enums.billing_scheme;
    (* Time at which the object was created. Measured in seconds since the Unix epoch. *)
    created: int32;
    (* Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). *)
    currency: string;
    (* Unique identifier for the object. *)
    id: string;
    (* Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. *)
    livemode: bool;
    (* A lookup key used to retrieve prices dynamically from a static string. *)
    lookup_key: string option [@default None];
    (* Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. *)
    metadata: (string * string) list;
    (* A brief description of the plan, hidden from customers. *)
    nickname: string option [@default None];
    (* String representing the object's type. Objects of the same type share the same value. *)
    _object: Enums.deleted_price_object[@default `Price];
    (* The ID of the product this price is associated with. *)
    product: Any_ofstringproductdeleted_product.t;
    (* The recurring components of a price such as `interval` and `usage_type`. *)
    recurring: Any_ofrecurring.t option [@default None];
    (* Each element represents a pricing tier. This parameter requires `billing_scheme` to be set to `tiered`. See also the documentation for `billing_scheme`. *)
    tiers: Price_tier.t list;
    (* Defines if the tiering price should be `graduated` or `volume` based. In `volume`-based tiering, the maximum quantity within a period determines the per unit price. In `graduated` tiering, pricing can change as the quantity grows. *)
    tiers_mode: Enums.tiers_mode option [@default None];
    (* Apply a transformation to the reported usage or set quantity before computing the amount billed. Cannot be combined with `tiers`. *)
    transform_quantity: Any_oftransform_quantity.t option [@default None];
    (* One of `one_time` or `recurring` depending on whether the price is for a one-time purchase or a recurring (subscription) purchase. *)
    _type: Enums.price_type;
    (* The unit amount in %s to be charged, represented as a whole integer if possible. *)
    unit_amount: int32 option [@default None];
    (* The unit amount in %s to be charged, represented as a decimal string with at most 12 decimal places. *)
    unit_amount_decimal: string option [@default None];
} [@@deriving yojson { strict = false }, show ];;

(** Prices define the unit cost, currency, and (optional) billing cycle for both recurring and one-time purchases of products. [Products](https://stripe.com/docs/api#products) help you track inventory or provisioning, and prices help you track payment terms. Different physical goods or levels of service should be represented by products, and pricing options should be represented by prices. This approach lets you change prices without having to change your provisioning scheme.  For example, you might have a single \''gold\'' product that has prices for $10/month, $100/year, and €9 once.  Related guides: [Set up a subscription](https://stripe.com/docs/billing/subscriptions/set-up-subscription), [create an invoice](https://stripe.com/docs/billing/invoices/create), and more about [products and prices](https://stripe.com/docs/billing/prices-guide). *)
let create (active : bool) (billing_scheme : Enums.billing_scheme) (created : int32) (currency : string) (id : string) (livemode : bool) (metadata : (string * string) list) (_object : Enums.deleted_price_object) (product : Any_ofstringproductdeleted_product.t) (_type : Enums.price_type) : t = {
    active = active;
    billing_scheme = billing_scheme;
    created = created;
    currency = currency;
    id = id;
    livemode = livemode;
    lookup_key = None;
    metadata = metadata;
    nickname = None;
    _object = _object;
    product = product;
    recurring = None;
    tiers = [];
    tiers_mode = None;
    transform_quantity = None;
    _type = _type;
    unit_amount = None;
    unit_amount_decimal = None;
}

