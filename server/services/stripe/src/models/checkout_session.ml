(*
 * This file has been generated by the OCamlClientCodegen generator for openapi-generator.
 *
 * Generated by: https://openapi-generator.tech
 *
 * Schema Checkout_session.t : A Checkout Session represents your customer's session as they pay for one-time purchases or subscriptions through [Checkout](https://stripe.com/docs/payments/checkout). We recommend creating a new Session each time your customer attempts to pay.  Once payment is successful, the Checkout Session will contain a reference to the [Customer](https://stripe.com/docs/api/customers), and either the successful [PaymentIntent](https://stripe.com/docs/api/payment_intents) or an active [Subscription](https://stripe.com/docs/api/subscriptions).  You can create a Checkout Session on your server and pass its ID to the client to begin Checkout.  Related guide: [Checkout Server Quickstart](https://stripe.com/docs/payments/checkout/api).
 *)

type t = {
    (* Enables user redeemable promotion codes. *)
    allow_promotion_codes: bool option [@default None];
    (* Total of all items before discounts or taxes are applied. *)
    amount_subtotal: int32 option [@default None];
    (* Total of all items after discounts and taxes are applied. *)
    amount_total: int32 option [@default None];
    (* Describes whether Checkout should collect the customer's billing address. *)
    billing_address_collection: Enums.billing_address_collection option [@default None];
    (* The URL the customer will be directed to if they decide to cancel payment and return to your website. *)
    cancel_url: string;
    (* A unique string to reference the Checkout Session. This can be a customer ID, a cart ID, or similar, and can be used to reconcile the Session with your internal systems. *)
    client_reference_id: string option [@default None];
    (* Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). *)
    currency: string option [@default None];
    (* The ID of the customer for this Session. For Checkout Sessions in `payment` or `subscription` mode, Checkout will create a new customer object based on information provided during the payment flow unless an existing customer was provided when the Session was created. *)
    customer: Any_ofstringcustomerdeleted_customer.t option [@default None];
    (* If provided, this value will be used when the Customer object is created. If not provided, customers will be asked to enter their email address. Use this parameter to prefill customer data if you already have an email on file. To access information about the customer once the payment flow is complete, use the `customer` attribute. *)
    customer_email: string option [@default None];
    (* Unique identifier for the object. Used to pass to `redirectToCheckout` in Stripe.js. *)
    id: string;
    line_items: Payment_pages_checkout_session_list_line_items_1.t option [@default None];
    (* Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. *)
    livemode: bool;
    (* The IETF language tag of the locale Checkout is displayed in. If blank or `auto`, the browser's locale is used. *)
    locale: Enums.locale option [@default None];
    (* Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. *)
    metadata: (string * string) list;
    (* The mode of the Checkout Session. *)
    mode: Enums.mode;
    (* String representing the object's type. Objects of the same type share the same value. *)
    _object: Enums.checkout_session_object[@default `CheckoutPeriodsession];
    (* The ID of the PaymentIntent for Checkout Sessions in `payment` mode. *)
    payment_intent: Any_ofstringpayment_intent.t option [@default None];
    (* A list of the types of payment methods (e.g. card) this Checkout Session is allowed to accept. *)
    payment_method_types: string list;
    (* The payment status of the Checkout Session, one of `paid`, `unpaid`, or `no_payment_required`. You can use this value to decide when to fulfill your customer's order. *)
    payment_status: Enums.payment_status;
    (* The ID of the SetupIntent for Checkout Sessions in `setup` mode. *)
    setup_intent: Any_ofstringsetup_intent.t option [@default None];
    (* Shipping information for this Checkout Session. *)
    shipping: Any_ofshipping.t option [@default None];
    (* When set, provides configuration for Checkout to collect a shipping address from a customer. *)
    shipping_address_collection: Any_ofpayment_pages_payment_page_resources_shipping_address_collection.t option [@default None];
    (* Describes the type of transaction being performed by Checkout in order to customize relevant text on the page, such as the submit button. `submit_type` can only be specified on Checkout Sessions in `payment` mode, but not Checkout Sessions in `subscription` or `setup` mode. *)
    submit_type: Enums.submit_type option [@default None];
    (* The ID of the subscription for Checkout Sessions in `subscription` mode. *)
    subscription: Any_ofstringsubscription.t option [@default None];
    (* The URL the customer will be directed to after the payment or subscription creation is successful. *)
    success_url: string;
    (* Tax and discount details for the computed total amount. *)
    total_details: Any_ofpayment_pages_checkout_session_total_details.t option [@default None];
} [@@deriving yojson { strict = false }, show ];;

(** A Checkout Session represents your customer's session as they pay for one-time purchases or subscriptions through [Checkout](https://stripe.com/docs/payments/checkout). We recommend creating a new Session each time your customer attempts to pay.  Once payment is successful, the Checkout Session will contain a reference to the [Customer](https://stripe.com/docs/api/customers), and either the successful [PaymentIntent](https://stripe.com/docs/api/payment_intents) or an active [Subscription](https://stripe.com/docs/api/subscriptions).  You can create a Checkout Session on your server and pass its ID to the client to begin Checkout.  Related guide: [Checkout Server Quickstart](https://stripe.com/docs/payments/checkout/api). *)
let create (cancel_url : string) (id : string) (livemode : bool) (mode : Enums.mode) (_object : Enums.checkout_session_object) (payment_method_types : string list) (payment_status : Enums.payment_status) (success_url : string) : t = {
    allow_promotion_codes = None;
    amount_subtotal = None;
    amount_total = None;
    billing_address_collection = None;
    cancel_url = cancel_url;
    client_reference_id = None;
    currency = None;
    customer = None;
    customer_email = None;
    id = id;
    line_items = None;
    livemode = livemode;
    locale = None;
    metadata = [];
    mode = mode;
    _object = _object;
    payment_intent = None;
    payment_method_types = payment_method_types;
    payment_status = payment_status;
    setup_intent = None;
    shipping = None;
    shipping_address_collection = None;
    submit_type = None;
    subscription = None;
    success_url = success_url;
    total_details = None;
}

