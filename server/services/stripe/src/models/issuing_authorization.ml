(*
 * This file has been generated by the OCamlClientCodegen generator for openapi-generator.
 *
 * Generated by: https://openapi-generator.tech
 *
 * Schema Issuing_authorization.t : When an [issued card](https://stripe.com/docs/issuing) is used to make a purchase, an Issuing `Authorization` object is created. [Authorizations](https://stripe.com/docs/issuing/purchases/authorizations) must be approved for the purchase to be completed successfully.  Related guide: [Issued Card Authorizations](https://stripe.com/docs/issuing/purchases/authorizations).
 *)

type t = {
    (* The total amount that was authorized or rejected. This amount is in the card's currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). *)
    amount: int32;
    (* Detailed breakdown of amount components. These amounts are denominated in `currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). *)
    amount_details: Any_ofissuing_authorization_amount_details.t option [@default None];
    (* Whether the authorization has been approved. *)
    approved: bool;
    (* How the card details were provided. *)
    authorization_method: Enums.authorization_method;
    (* List of balance transactions associated with this authorization. *)
    balance_transactions: Balance_transaction.t list;
    card: Issuing_card.t;
    (* The cardholder to whom this authorization belongs. *)
    cardholder: Any_ofstringissuing_cardholder.t option [@default None];
    (* Time at which the object was created. Measured in seconds since the Unix epoch. *)
    created: int32;
    (* Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). *)
    currency: string;
    (* Unique identifier for the object. *)
    id: string;
    (* Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. *)
    livemode: bool;
    (* The total amount that was authorized or rejected. This amount is in the `merchant_currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). *)
    merchant_amount: int32;
    (* The currency that was presented to the cardholder for the authorization. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). *)
    merchant_currency: string;
    merchant_data: Issuing_authorization_merchant_data.t;
    (* Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. *)
    metadata: (string * string) list;
    (* String representing the object's type. Objects of the same type share the same value. *)
    _object: Enums.issuing_authorization_object[@default `IssuingPeriodauthorization];
    (* The pending authorization request. This field will only be non-null during an `issuing_authorization.request` webhook. *)
    pending_request: Any_ofissuing_authorization_pending_request.t option [@default None];
    (* History of every time the authorization was approved/denied (whether approved/denied by you directly or by Stripe based on your `spending_controls`). If the merchant changes the authorization by performing an [incremental authorization or partial capture](https://stripe.com/docs/issuing/purchases/authorizations), you can look at this field to see the previous states of the authorization. *)
    request_history: Issuing_authorization_request.t list;
    (* The current status of the authorization in its lifecycle. *)
    status: Enums.issuing_authorization_status;
    (* List of [transactions](https://stripe.com/docs/api/issuing/transactions) associated with this authorization. *)
    transactions: Issuing_transaction.t list;
    verification_data: Issuing_authorization_verification_data.t;
    (* What, if any, digital wallet was used for this authorization. One of `apple_pay`, `google_pay`, or `samsung_pay`. *)
    wallet: string option [@default None];
} [@@deriving yojson { strict = false }, show ];;

(** When an [issued card](https://stripe.com/docs/issuing) is used to make a purchase, an Issuing `Authorization` object is created. [Authorizations](https://stripe.com/docs/issuing/purchases/authorizations) must be approved for the purchase to be completed successfully.  Related guide: [Issued Card Authorizations](https://stripe.com/docs/issuing/purchases/authorizations). *)
let create (amount : int32) (approved : bool) (authorization_method : Enums.authorization_method) (balance_transactions : Balance_transaction.t list) (card : Issuing_card.t) (created : int32) (currency : string) (id : string) (livemode : bool) (merchant_amount : int32) (merchant_currency : string) (merchant_data : Issuing_authorization_merchant_data.t) (metadata : (string * string) list) (_object : Enums.issuing_authorization_object) (request_history : Issuing_authorization_request.t list) (status : Enums.issuing_authorization_status) (transactions : Issuing_transaction.t list) (verification_data : Issuing_authorization_verification_data.t) : t = {
    amount = amount;
    amount_details = None;
    approved = approved;
    authorization_method = authorization_method;
    balance_transactions = balance_transactions;
    card = card;
    cardholder = None;
    created = created;
    currency = currency;
    id = id;
    livemode = livemode;
    merchant_amount = merchant_amount;
    merchant_currency = merchant_currency;
    merchant_data = merchant_data;
    metadata = metadata;
    _object = _object;
    pending_request = None;
    request_history = request_history;
    status = status;
    transactions = transactions;
    verification_data = verification_data;
    wallet = None;
}

