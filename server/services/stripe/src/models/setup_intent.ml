(*
 * This file has been generated by the OCamlClientCodegen generator for openapi-generator.
 *
 * Generated by: https://openapi-generator.tech
 *
 * Schema Setup_intent.t : A SetupIntent guides you through the process of setting up and saving a customer's payment credentials for future payments. For example, you could use a SetupIntent to set up and save your customer's card without immediately collecting a payment. Later, you can use [PaymentIntents](https://stripe.com/docs/api#payment_intents) to drive the payment flow.  Create a SetupIntent as soon as you're ready to collect your customer's payment credentials. Do not maintain long-lived, unconfirmed SetupIntents as they may no longer be valid. The SetupIntent then transitions through multiple [statuses](https://stripe.com/docs/payments/intents#intent-statuses) as it guides you through the setup process.  Successful SetupIntents result in payment credentials that are optimized for future payments. For example, cardholders in [certain regions](/guides/strong-customer-authentication) may need to be run through [Strong Customer Authentication](https://stripe.com/docs/strong-customer-authentication) at the time of payment method collection in order to streamline later [off-session payments](https://stripe.com/docs/payments/setup-intents). If the SetupIntent is used with a [Customer](https://stripe.com/docs/api#setup_intent_object-customer), upon success, it will automatically attach the resulting payment method to that Customer. We recommend using SetupIntents or [setup_future_usage](https://stripe.com/docs/api#payment_intent_object-setup_future_usage) on PaymentIntents to save payment methods in order to prevent saving invalid or unoptimized payment methods.  By using SetupIntents, you ensure that your customers experience the minimum set of required friction, even as regulations change over time.  Related guide: [Setup Intents API](https://stripe.com/docs/payments/setup-intents).
 *)

type t = {
    (* ID of the Connect application that created the SetupIntent. *)
    application: Any_ofstringapplication.t option [@default None];
    (* Reason for cancellation of this SetupIntent, one of `abandoned`, `requested_by_customer`, or `duplicate`. *)
    cancellation_reason: Enums.setup_intent_cancellation_reason option [@default None];
    (* The client secret of this SetupIntent. Used for client-side retrieval using a publishable key.  The client secret can be used to complete payment setup from your frontend. It should not be stored, logged, embedded in URLs, or exposed to anyone other than the customer. Make sure that you have TLS enabled on any page that includes the client secret. *)
    client_secret: string option [@default None];
    (* Time at which the object was created. Measured in seconds since the Unix epoch. *)
    created: int32;
    (* ID of the Customer this SetupIntent belongs to, if one exists.  If present, the SetupIntent's payment method will be attached to the Customer on successful setup. Payment methods attached to other Customers cannot be used with this SetupIntent. *)
    customer: Any_ofstringcustomerdeleted_customer.t option [@default None];
    (* An arbitrary string attached to the object. Often useful for displaying to users. *)
    description: string option [@default None];
    (* Unique identifier for the object. *)
    id: string;
    (* The error encountered in the previous SetupIntent confirmation. *)
    last_setup_error: Any_ofapi_errors.t option [@default None];
    (* The most recent SetupAttempt for this SetupIntent. *)
    latest_attempt: Any_ofstringsetup_attempt.t option [@default None];
    (* Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. *)
    livemode: bool;
    (* ID of the multi use Mandate generated by the SetupIntent. *)
    mandate: Any_ofstringmandate.t option [@default None];
    (* Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. *)
    metadata: (string * string) list;
    (* If present, this property tells you what actions you need to take in order for your customer to continue payment setup. *)
    next_action: Any_ofsetup_intent_next_action.t option [@default None];
    (* String representing the object's type. Objects of the same type share the same value. *)
    _object: Enums.setup_intent_object[@default `Setup_intent];
    (* The account (if any) for which the setup is intended. *)
    on_behalf_of: Any_ofstringaccount.t option [@default None];
    (* ID of the payment method used with this SetupIntent. *)
    payment_method: Any_ofstringpayment_method.t option [@default None];
    (* Payment-method-specific configuration for this SetupIntent. *)
    payment_method_options: Any_ofsetup_intent_payment_method_options.t option [@default None];
    (* The list of payment method types (e.g. card) that this SetupIntent is allowed to set up. *)
    payment_method_types: string list;
    (* ID of the single_use Mandate generated by the SetupIntent. *)
    single_use_mandate: Any_ofstringmandate.t option [@default None];
    (* [Status](https://stripe.com/docs/payments/intents#intent-statuses) of this SetupIntent, one of `requires_payment_method`, `requires_confirmation`, `requires_action`, `processing`, `canceled`, or `succeeded`. *)
    status: Enums.setup_intent_status;
    (* Indicates how the payment method is intended to be used in the future.  Use `on_session` if you intend to only reuse the payment method when the customer is in your checkout flow. Use `off_session` if your customer may or may not be in your checkout flow. If not provided, this value defaults to `off_session`. *)
    usage: string;
} [@@deriving yojson { strict = false }, show ];;

(** A SetupIntent guides you through the process of setting up and saving a customer's payment credentials for future payments. For example, you could use a SetupIntent to set up and save your customer's card without immediately collecting a payment. Later, you can use [PaymentIntents](https://stripe.com/docs/api#payment_intents) to drive the payment flow.  Create a SetupIntent as soon as you're ready to collect your customer's payment credentials. Do not maintain long-lived, unconfirmed SetupIntents as they may no longer be valid. The SetupIntent then transitions through multiple [statuses](https://stripe.com/docs/payments/intents#intent-statuses) as it guides you through the setup process.  Successful SetupIntents result in payment credentials that are optimized for future payments. For example, cardholders in [certain regions](/guides/strong-customer-authentication) may need to be run through [Strong Customer Authentication](https://stripe.com/docs/strong-customer-authentication) at the time of payment method collection in order to streamline later [off-session payments](https://stripe.com/docs/payments/setup-intents). If the SetupIntent is used with a [Customer](https://stripe.com/docs/api#setup_intent_object-customer), upon success, it will automatically attach the resulting payment method to that Customer. We recommend using SetupIntents or [setup_future_usage](https://stripe.com/docs/api#payment_intent_object-setup_future_usage) on PaymentIntents to save payment methods in order to prevent saving invalid or unoptimized payment methods.  By using SetupIntents, you ensure that your customers experience the minimum set of required friction, even as regulations change over time.  Related guide: [Setup Intents API](https://stripe.com/docs/payments/setup-intents). *)
let create (created : int32) (id : string) (livemode : bool) (_object : Enums.setup_intent_object) (payment_method_types : string list) (status : Enums.setup_intent_status) (usage : string) : t = {
    application = None;
    cancellation_reason = None;
    client_secret = None;
    created = created;
    customer = None;
    description = None;
    id = id;
    last_setup_error = None;
    latest_attempt = None;
    livemode = livemode;
    mandate = None;
    metadata = [];
    next_action = None;
    _object = _object;
    on_behalf_of = None;
    payment_method = None;
    payment_method_options = None;
    payment_method_types = payment_method_types;
    single_use_mandate = None;
    status = status;
    usage = usage;
}

