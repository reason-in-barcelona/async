(*
 * This file has been generated by the OCamlClientCodegen generator for openapi-generator.
 *
 * Generated by: https://openapi-generator.tech
 *
 *)

type t = {
    (* Card brand. Can be `amex`, `diners`, `discover`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`. *)
    brand: string;
    (* Checks on Card address and CVC if provided. *)
    checks: Any_ofpayment_method_card_checks.t option [@default None];
    (* Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected. *)
    country: string option [@default None];
    (* Two-digit number representing the card's expiration month. *)
    exp_month: int32;
    (* Four-digit number representing the card's expiration year. *)
    exp_year: int32;
    (* Uniquely identifies this particular card number. You can use this attribute to check whether two customers whoâ€™ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number. *)
    fingerprint: string option [@default None];
    (* Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`. *)
    funding: string;
    (* Details of the original PaymentMethod that created this object. *)
    generated_from: Any_ofpayment_method_card_generated_card.t option [@default None];
    (* The last four digits of the card. *)
    last4: string;
    (* Contains information about card networks that can be used to process the payment. *)
    networks: Any_ofnetworks.t option [@default None];
    (* Contains details on how this Card maybe be used for 3D Secure authentication. *)
    three_d_secure_usage: Any_ofthree_d_secure_usage.t option [@default None];
    (* If this Card is part of a card wallet, this contains the details of the card wallet. *)
    wallet: Any_ofpayment_method_card_wallet.t option [@default None];
} [@@deriving yojson { strict = false }, show ];;

let create (brand : string) (exp_month : int32) (exp_year : int32) (funding : string) (last4 : string) : t = {
    brand = brand;
    checks = None;
    country = None;
    exp_month = exp_month;
    exp_year = exp_year;
    fingerprint = None;
    funding = funding;
    generated_from = None;
    last4 = last4;
    networks = None;
    three_d_secure_usage = None;
    wallet = None;
}

