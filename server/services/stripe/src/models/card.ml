(*
 * This file has been generated by the OCamlClientCodegen generator for openapi-generator.
 *
 * Generated by: https://openapi-generator.tech
 *
 * Schema Card.t : You can store multiple cards on a customer in order to charge the customer later. You can also store multiple debit cards on a recipient in order to transfer to those cards later.  Related guide: [Card Payments with Sources](https://stripe.com/docs/sources/cards).
 *)

type t = {
    (* The account this card belongs to. This attribute will not be in the card object if the card belongs to a customer or recipient instead. *)
    account: Any_ofstringaccount.t option [@default None];
    (* City/District/Suburb/Town/Village. *)
    address_city: string option [@default None];
    (* Billing address country, if provided when creating card. *)
    address_country: string option [@default None];
    (* Address line 1 (Street address/PO Box/Company name). *)
    address_line1: string option [@default None];
    (* If `address_line1` was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`. *)
    address_line1_check: string option [@default None];
    (* Address line 2 (Apartment/Suite/Unit/Building). *)
    address_line2: string option [@default None];
    (* State/County/Province/Region. *)
    address_state: string option [@default None];
    (* ZIP or postal code. *)
    address_zip: string option [@default None];
    (* If `address_zip` was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`. *)
    address_zip_check: string option [@default None];
    (* A set of available payout methods for this card. Only values from this set should be passed as the `method` when creating a payout. *)
    available_payout_methods: Enums.available_payout_methods list;
    (* Card brand. Can be `American Express`, `Diners Club`, `Discover`, `JCB`, `MasterCard`, `UnionPay`, `Visa`, or `Unknown`. *)
    brand: string;
    (* Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected. *)
    country: string option [@default None];
    (* Three-letter [ISO code for currency](https://stripe.com/docs/payouts). Only applicable on accounts (not customers or recipients). The card can be used as a transfer destination for funds in this currency. *)
    currency: string option [@default None];
    (* The customer that this card belongs to. This attribute will not be in the card object if the card belongs to an account or recipient instead. *)
    customer: Any_ofstringcustomerdeleted_customer.t option [@default None];
    (* If a CVC was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`. A result of unchecked indicates that CVC was provided but hasn't been checked yet. Checks are typically performed when attaching a card to a Customer object, or when creating a charge. For more details, see [Check if a card is valid without a charge](https://support.stripe.com/questions/check-if-a-card-is-valid-without-a-charge). *)
    cvc_check: string option [@default None];
    (* Whether this card is the default external account for its currency. *)
    default_for_currency: bool option [@default None];
    (* (For tokenized numbers only.) The last four digits of the device account number. *)
    dynamic_last4: string option [@default None];
    (* Two-digit number representing the card's expiration month. *)
    exp_month: int32;
    (* Four-digit number representing the card's expiration year. *)
    exp_year: int32;
    (* Uniquely identifies this particular card number. You can use this attribute to check whether two customers whoâ€™ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number. *)
    fingerprint: string option [@default None];
    (* Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`. *)
    funding: string;
    (* Unique identifier for the object. *)
    id: string;
    (* The last four digits of the card. *)
    last4: string;
    (* Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. *)
    metadata: (string * string) list;
    (* Cardholder name. *)
    name: string option [@default None];
    (* String representing the object's type. Objects of the same type share the same value. *)
    _object: Enums.card_object[@default `Card];
    (* The recipient that this card belongs to. This attribute will not be in the card object if the card belongs to a customer or account instead. *)
    recipient: Any_ofstringrecipient.t option [@default None];
    (* If the card number is tokenized, this is the method that was used. Can be `android_pay` (includes Google Pay), `apple_pay`, `masterpass`, `visa_checkout`, or null. *)
    tokenization_method: string option [@default None];
} [@@deriving yojson { strict = false }, show ];;

(** You can store multiple cards on a customer in order to charge the customer later. You can also store multiple debit cards on a recipient in order to transfer to those cards later.  Related guide: [Card Payments with Sources](https://stripe.com/docs/sources/cards). *)
let create (brand : string) (exp_month : int32) (exp_year : int32) (funding : string) (id : string) (last4 : string) (_object : Enums.card_object) : t = {
    account = None;
    address_city = None;
    address_country = None;
    address_line1 = None;
    address_line1_check = None;
    address_line2 = None;
    address_state = None;
    address_zip = None;
    address_zip_check = None;
    available_payout_methods = [];
    brand = brand;
    country = None;
    currency = None;
    customer = None;
    cvc_check = None;
    default_for_currency = None;
    dynamic_last4 = None;
    exp_month = exp_month;
    exp_year = exp_year;
    fingerprint = None;
    funding = funding;
    id = id;
    last4 = last4;
    metadata = [];
    name = None;
    _object = _object;
    recipient = None;
    tokenization_method = None;
}

