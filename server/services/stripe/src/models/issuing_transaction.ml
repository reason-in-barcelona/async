(*
 * This file has been generated by the OCamlClientCodegen generator for openapi-generator.
 *
 * Generated by: https://openapi-generator.tech
 *
 * Schema Issuing_transaction.t : Any use of an [issued card](https://stripe.com/docs/issuing) that results in funds entering or leaving your Stripe account, such as a completed purchase or refund, is represented by an Issuing `Transaction` object.  Related guide: [Issued Card Transactions](https://stripe.com/docs/issuing/purchases/transactions).
 *)

type t = {
    (* The transaction amount, which will be reflected in your balance. This amount is in your currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). *)
    amount: int32;
    (* Detailed breakdown of amount components. These amounts are denominated in `currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). *)
    amount_details: Any_ofissuing_transaction_amount_details.t option [@default None];
    (* The `Authorization` object that led to this transaction. *)
    authorization: Any_ofstringissuing_authorization.t option [@default None];
    (* ID of the [balance transaction](https://stripe.com/docs/api/balance_transactions) associated with this transaction. *)
    balance_transaction: Any_ofstringbalance_transaction.t option [@default None];
    (* The card used to make this transaction. *)
    card: Any_ofstringissuing_card.t;
    (* The cardholder to whom this transaction belongs. *)
    cardholder: Any_ofstringissuing_cardholder.t option [@default None];
    (* Time at which the object was created. Measured in seconds since the Unix epoch. *)
    created: int32;
    (* Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). *)
    currency: string;
    (* If you've disputed the transaction, the ID of the dispute. *)
    dispute: Any_ofstringissuing_dispute.t option [@default None];
    (* Unique identifier for the object. *)
    id: string;
    (* Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. *)
    livemode: bool;
    (* The amount that the merchant will receive, denominated in `merchant_currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). It will be different from `amount` if the merchant is taking payment in a different currency. *)
    merchant_amount: int32;
    (* The currency with which the merchant is taking payment. *)
    merchant_currency: string;
    merchant_data: Issuing_authorization_merchant_data.t;
    (* Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. *)
    metadata: (string * string) list;
    (* String representing the object's type. Objects of the same type share the same value. *)
    _object: Enums.issuing_transaction_object[@default `IssuingPeriodtransaction];
    (* Additional purchase information that is optionally provided by the merchant. *)
    purchase_details: Any_ofissuing_transaction_purchase_details.t option [@default None];
    (* The nature of the transaction. *)
    _type: Enums.issuing_transaction_type;
} [@@deriving yojson { strict = false }, show ];;

(** Any use of an [issued card](https://stripe.com/docs/issuing) that results in funds entering or leaving your Stripe account, such as a completed purchase or refund, is represented by an Issuing `Transaction` object.  Related guide: [Issued Card Transactions](https://stripe.com/docs/issuing/purchases/transactions). *)
let create (amount : int32) (card : Any_ofstringissuing_card.t) (created : int32) (currency : string) (id : string) (livemode : bool) (merchant_amount : int32) (merchant_currency : string) (merchant_data : Issuing_authorization_merchant_data.t) (metadata : (string * string) list) (_object : Enums.issuing_transaction_object) (_type : Enums.issuing_transaction_type) : t = {
    amount = amount;
    amount_details = None;
    authorization = None;
    balance_transaction = None;
    card = card;
    cardholder = None;
    created = created;
    currency = currency;
    dispute = None;
    id = id;
    livemode = livemode;
    merchant_amount = merchant_amount;
    merchant_currency = merchant_currency;
    merchant_data = merchant_data;
    metadata = metadata;
    _object = _object;
    purchase_details = None;
    _type = _type;
}

