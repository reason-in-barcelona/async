(*
 * This file has been generated by the OCamlClientCodegen generator for openapi-generator.
 *
 * Generated by: https://openapi-generator.tech
 *
 * Schema Payment_method.t : PaymentMethod objects represent your customer's payment instruments. They can be used with [PaymentIntents](https://stripe.com/docs/payments/payment-intents) to collect payments or saved to Customer objects to store instrument details for future payments.  Related guides: [Payment Methods](https://stripe.com/docs/payments/payment-methods) and [More Payment Scenarios](https://stripe.com/docs/payments/more-payment-scenarios).
 *)

type t = {
    alipay: Yojson.Safe.t option [@default None];
    au_becs_debit: Payment_method_au_becs_debit.t option [@default None];
    bacs_debit: Payment_method_bacs_debit.t option [@default None];
    bancontact: Yojson.Safe.t option [@default None];
    billing_details: Billing_details.t;
    card: Payment_method_card.t option [@default None];
    card_present: Yojson.Safe.t option [@default None];
    (* Time at which the object was created. Measured in seconds since the Unix epoch. *)
    created: int32;
    (* The ID of the Customer to which this PaymentMethod is saved. This will not be set when the PaymentMethod has not been saved to a Customer. *)
    customer: Any_ofstringcustomer.t option [@default None];
    eps: Payment_method_eps.t option [@default None];
    fpx: Payment_method_fpx.t option [@default None];
    giropay: Yojson.Safe.t option [@default None];
    grabpay: Yojson.Safe.t option [@default None];
    (* Unique identifier for the object. *)
    id: string;
    ideal: Payment_method_ideal.t option [@default None];
    interac_present: Yojson.Safe.t option [@default None];
    (* Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. *)
    livemode: bool;
    (* Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. *)
    metadata: (string * string) list;
    (* String representing the object's type. Objects of the same type share the same value. *)
    _object: Enums.payment_method_object[@default `Payment_method];
    oxxo: Yojson.Safe.t option [@default None];
    p24: Payment_method_p24.t option [@default None];
    sepa_debit: Payment_method_sepa_debit.t option [@default None];
    sofort: Payment_method_sofort.t option [@default None];
    (* The type of the PaymentMethod. An additional hash is included on the PaymentMethod with a name matching this value. It contains additional information specific to the PaymentMethod type. *)
    _type: Enums.payment_method_type;
} [@@deriving yojson { strict = false }, show ];;

(** PaymentMethod objects represent your customer's payment instruments. They can be used with [PaymentIntents](https://stripe.com/docs/payments/payment-intents) to collect payments or saved to Customer objects to store instrument details for future payments.  Related guides: [Payment Methods](https://stripe.com/docs/payments/payment-methods) and [More Payment Scenarios](https://stripe.com/docs/payments/more-payment-scenarios). *)
let create (billing_details : Billing_details.t) (created : int32) (id : string) (livemode : bool) (_object : Enums.payment_method_object) (_type : Enums.payment_method_type) : t = {
    alipay = None;
    au_becs_debit = None;
    bacs_debit = None;
    bancontact = None;
    billing_details = billing_details;
    card = None;
    card_present = None;
    created = created;
    customer = None;
    eps = None;
    fpx = None;
    giropay = None;
    grabpay = None;
    id = id;
    ideal = None;
    interac_present = None;
    livemode = livemode;
    metadata = [];
    _object = _object;
    oxxo = None;
    p24 = None;
    sepa_debit = None;
    sofort = None;
    _type = _type;
}

