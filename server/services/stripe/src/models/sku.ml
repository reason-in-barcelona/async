(*
 * This file has been generated by the OCamlClientCodegen generator for openapi-generator.
 *
 * Generated by: https://openapi-generator.tech
 *
 * Schema Sku.t : Stores representations of [stock keeping units](http://en.wikipedia.org/wiki/Stock_keeping_unit). SKUs describe specific product variations, taking into account any combination of: attributes, currency, and cost. For example, a product may be a T-shirt, whereas a specific SKU represents the `size: large`, `color: red` version of that shirt.  Can also be used to manage inventory.  Related guide: [Tax, Shipping, and Inventory](https://stripe.com/docs/orders).
 *)

type t = {
    (* Whether the SKU is available for purchase. *)
    active: bool;
    (* A dictionary of attributes and values for the attributes defined by the product. If, for example, a product's attributes are `[\''size\'', \''gender\'']`, a valid SKU has the following dictionary of attributes: `{\''size\'': \''Medium\'', \''gender\'': \''Unisex\''}`. *)
    attributes: (string * string) list;
    (* Time at which the object was created. Measured in seconds since the Unix epoch. *)
    created: int32;
    (* Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). *)
    currency: string;
    (* Unique identifier for the object. *)
    id: string;
    (* The URL of an image for this SKU, meant to be displayable to the customer. *)
    image: string option [@default None];
    inventory: Inventory.t;
    (* Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. *)
    livemode: bool;
    (* Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. *)
    metadata: (string * string) list;
    (* String representing the object's type. Objects of the same type share the same value. *)
    _object: Enums.deleted_sku_object[@default `Sku];
    (* The dimensions of this SKU for shipping purposes. *)
    package_dimensions: Any_ofpackage_dimensions.t option [@default None];
    (* The cost of the item as a positive integer in the smallest currency unit (that is, 100 cents to charge $1.00, or 100 to charge Â¥100, Japanese Yen being a zero-decimal currency). *)
    price: int32;
    (* The ID of the product this SKU is associated with. The product must be currently active. *)
    product: Any_ofstringproduct.t;
    (* Time at which the object was last updated. Measured in seconds since the Unix epoch. *)
    updated: int32;
} [@@deriving yojson { strict = false }, show ];;

(** Stores representations of [stock keeping units](http://en.wikipedia.org/wiki/Stock_keeping_unit). SKUs describe specific product variations, taking into account any combination of: attributes, currency, and cost. For example, a product may be a T-shirt, whereas a specific SKU represents the `size: large`, `color: red` version of that shirt.  Can also be used to manage inventory.  Related guide: [Tax, Shipping, and Inventory](https://stripe.com/docs/orders). *)
let create (active : bool) (attributes : (string * string) list) (created : int32) (currency : string) (id : string) (inventory : Inventory.t) (livemode : bool) (metadata : (string * string) list) (_object : Enums.deleted_sku_object) (price : int32) (product : Any_ofstringproduct.t) (updated : int32) : t = {
    active = active;
    attributes = attributes;
    created = created;
    currency = currency;
    id = id;
    image = None;
    inventory = inventory;
    livemode = livemode;
    metadata = metadata;
    _object = _object;
    package_dimensions = None;
    price = price;
    product = product;
    updated = updated;
}

