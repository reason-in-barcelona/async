(*
 * This file has been generated by the OCamlClientCodegen generator for openapi-generator.
 *
 * Generated by: https://openapi-generator.tech
 *
 *)

type t = {
    (* Specifies a usage aggregation strategy for prices of `usage_type=metered`. Allowed values are `sum` for summing up all usage during a period, `last_during_period` for using the last usage record reported within a period, `last_ever` for using the last usage record ever (across period bounds) or `max` which uses the usage record with the maximum reported usage during a period. Defaults to `sum`. *)
    aggregate_usage: Enums.aggregate_usage option [@default None];
    (* The frequency at which a subscription is billed. One of `day`, `week`, `month` or `year`. *)
    interval: Enums.interval;
    (* The number of intervals (specified in the `interval` attribute) between subscription billings. For example, `interval=month` and `interval_count=3` bills every 3 months. *)
    interval_count: int32;
    (* Configures how the quantity per period should be determined. Can be either `metered` or `licensed`. `licensed` automatically bills the `quantity` set when adding it to a subscription. `metered` aggregates the total usage based on usage records. Defaults to `licensed`. *)
    usage_type: Enums.usage_type;
} [@@deriving yojson { strict = false }, show ];;

let create (interval : Enums.interval) (interval_count : int32) (usage_type : Enums.usage_type) : t = {
    aggregate_usage = None;
    interval = interval;
    interval_count = interval_count;
    usage_type = usage_type;
}

