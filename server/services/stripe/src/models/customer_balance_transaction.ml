(*
 * This file has been generated by the OCamlClientCodegen generator for openapi-generator.
 *
 * Generated by: https://openapi-generator.tech
 *
 * Schema Customer_balance_transaction.t : Each customer has a [`balance`](https://stripe.com/docs/api/customers/object#customer_object-balance) value, which denotes a debit or credit that's automatically applied to their next invoice upon finalization. You may modify the value directly by using the [update customer API](https://stripe.com/docs/api/customers/update), or by creating a Customer Balance Transaction, which increments or decrements the customer's `balance` by the specified `amount`.  Related guide: [Customer Balance](https://stripe.com/docs/billing/customer/balance) to learn more.
 *)

type t = {
    (* The amount of the transaction. A negative value is a credit for the customer's balance, and a positive value is a debit to the customer's `balance`. *)
    amount: int32;
    (* Time at which the object was created. Measured in seconds since the Unix epoch. *)
    created: int32;
    (* The ID of the credit note (if any) related to the transaction. *)
    credit_note: Any_ofstringcredit_note.t option [@default None];
    (* Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). *)
    currency: string;
    (* The ID of the customer the transaction belongs to. *)
    customer: Any_ofstringcustomer.t;
    (* An arbitrary string attached to the object. Often useful for displaying to users. *)
    description: string option [@default None];
    (* The customer's `balance` after the transaction was applied. A negative value decreases the amount due on the customer's next invoice. A positive value increases the amount due on the customer's next invoice. *)
    ending_balance: int32;
    (* Unique identifier for the object. *)
    id: string;
    (* The ID of the invoice (if any) related to the transaction. *)
    invoice: Any_ofstringinvoice.t option [@default None];
    (* Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. *)
    livemode: bool;
    (* Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. *)
    metadata: (string * string) list;
    (* String representing the object's type. Objects of the same type share the same value. *)
    _object: Enums.customer_balance_transaction_object[@default `Customer_balance_transaction];
    (* Transaction type: `adjustment`, `applied_to_invoice`, `credit_note`, `initial`, `invoice_too_large`, `invoice_too_small`, `unspent_receiver_credit`, or `unapplied_from_invoice`. See the [Customer Balance page](https://stripe.com/docs/billing/customer/balance#types) to learn more about transaction types. *)
    _type: Enums.customer_balance_transaction_type;
} [@@deriving yojson { strict = false }, show ];;

(** Each customer has a [`balance`](https://stripe.com/docs/api/customers/object#customer_object-balance) value, which denotes a debit or credit that's automatically applied to their next invoice upon finalization. You may modify the value directly by using the [update customer API](https://stripe.com/docs/api/customers/update), or by creating a Customer Balance Transaction, which increments or decrements the customer's `balance` by the specified `amount`.  Related guide: [Customer Balance](https://stripe.com/docs/billing/customer/balance) to learn more. *)
let create (amount : int32) (created : int32) (currency : string) (customer : Any_ofstringcustomer.t) (ending_balance : int32) (id : string) (livemode : bool) (_object : Enums.customer_balance_transaction_object) (_type : Enums.customer_balance_transaction_type) : t = {
    amount = amount;
    created = created;
    credit_note = None;
    currency = currency;
    customer = customer;
    description = None;
    ending_balance = ending_balance;
    id = id;
    invoice = None;
    livemode = livemode;
    metadata = [];
    _object = _object;
    _type = _type;
}

